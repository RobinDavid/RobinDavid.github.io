<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Memo | Robin David]]></title>
  <link href="http://www.robindavid.fr/blog/categories/memo/atom.xml" rel="self"/>
  <link href="http://www.robindavid.fr/"/>
  <updated>2014-03-02T11:00:09+00:00</updated>
  <id>http://www.robindavid.fr/</id>
  <author>
    <name><![CDATA[Robin David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Basic but useful function python Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2012/06/15/useful-basic-function-python-memo/"/>
    <updated>2012-06-15T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/06/15/useful-basic-function-python-memo</id>
    <content type="html"><![CDATA[<h3>Read file into list</h3>

<p>The function take a file open in read byte mode and return a list of the decimal value of characters.</p>

<p>``` python Put every bytes of a file into a list
def toList(f):</p>

<pre><code>l = list()
while True:
    b = f.read(1)
    if b == '':
        break   
    else:
        l.append(ord(b))
return l
</code></pre>

<p>```</p>

<h3>Count instances of a char in a list</h3>

<p>Return a sorted list ordered descending of every elements and their hits.</p>

<p>``` python Count frequency of bytes
def countFreq(l): # return list with (decimal_char, occ)</p>

<pre><code>d={}
for elt in l:
    if d.has_key(elt):
        d[elt] += 1
    else:
        d[elt] = 1
return sorted(d.items(),key=lambda x: x[1], reverse=True)
</code></pre>

<p>```</p>

<h3>Maximum in a dictionnary</h3>

<p>Return the tuple key value of the element which have the highest value (from the list of elements returned in the function above
``` python get max
def max(d):</p>

<pre><code>m = 0
elt = ''
for k,v in d.items():
    if v &gt; m:
        m = v
        elt = k
return {elt:m}
</code></pre>

<p>```</p>

<h3>Caesar decipher</h3>

<p>Decipher the given list with the given shift.</p>

<p>``` python Caesar decipher function
def decipher(l,diff):</p>

<pre><code>newl = list()
for e in l:
    val = e - diff
    if val &lt; 0:
        newl.append(256 + (val % -256))
    else:
        newl.append(val)
return newl
</code></pre>

<p>```</p>

<h3>PGCD(GCD)</h3>

<p>Return the PGCD(GCD) of two values given in parameter</p>

<p>``` python compute GCD
def pgcd(num,divisor,remain=0):</p>

<pre><code>rem = num % divisor
if rem == 0:
    return remain
else:
    return pgcd(divisor,rem,rem)
</code></pre>

<p>```</p>

<h3>Prime Numbers</h3>

<p>Return a list of all the prime numbers until the number given in parameter.</p>

<p>``` python compute prime numbers
def getPrimeNb(x):</p>

<pre><code>l =[]
for i in range (1,x):
    if pgcd(x,i) == 1:
        l.append(i)
return l
</code></pre>

<p>```</p>

<h3>PGCD with Bezout Factors</h3>

<p>For two numbers given in parameter the function return the PGCD and the two Bezout factors (u and v).
``` python PGCD computation
def pgcduv(num,divisor):</p>

<pre><code>u = 1
v = 0
s = 0
t = 1
while (divisor &gt; 0):
    rest = num % divisor
    quo = num / divisor
    #print "%s = %s * %s + %s" % (num, quo, divisor, rest)
    # a = q * b + r
    num = divisor
    divisor = rest

    tmp = s
    s = u - quo * s
    u = tmp

    tmp = t
    t = v - quo * t
    v = tmp
return num, u, v
</code></pre>

<p>```</p>

<h3>Can be inversed</h3>

<p>Return true or false if the number given in parameter can be inversed (use the pgcd function above).</p>

<p>``` python
def inverse_possible(modulo, num):</p>

<pre><code>if pgcd(modulo, num, num) == 1:
    return True
else:
    return False
</code></pre>

<p>```</p>

<h3>Calculate inverse</h3>

<p>Return the inverse of a number with the given modulo.</p>

<p>``` python compute inverse
def inverse(num, mod):</p>

<pre><code>inv = 0
for i in range(mod):
    j = - mod
    while j &lt; 0:
        if (mod*i)+(num*j) == 1:
            inv = j
        j = j + 1
return inv+mod
</code></pre>

<p>```</p>

<h3>Coincidence index</h3>

<p>Take in argument the list returned by countFreq, and the total size of the list and return de index of coincidence.</p>

<p>``` python compute coincidence index
def cI(occ,n):</p>

<pre><code>somme = Decimal(0)
tmp = Decimal(n*(n-1))
for i in occ:
    somme = somme + ( Decimal(i[1]*(i[1]-1)) / tmp )
return somme
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pystatgrab Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2012/04/23/pystatgrab-memo/"/>
    <updated>2012-04-23T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/04/23/pystatgrab-memo</id>
    <content type="html"><![CDATA[<p>Pystatgrab is the python binding for the libstatgrab that allow to get statistical informations about you system like cpu load, filesystem io, network io etc..</p>

<p>It works only for linux, that whyÂ I recommend you to take a look at <a href="http://code.google.com/p/psutil/">psutil</a> which works on both Linux, Windows and OSX but also provides a lot more functionalities.</p>

<p>Anyway if you are interesed in a small and efficient statistics tools keep reading this article.</p>

<h3>All the available functions are</h3>

<ul>
<li><strong>sg_get_cpu_percents()</strong> Give information about CPU load in percents</li>
<li><strong>sg_get_cpu_stats()</strong> Same than cpu_percents but give also the timestamp</li>
<li><strong>sg_get_cpu_stats_diff()</strong> Return the difference in values with the previous cpu_percents/stats</li>
<li><strong>sg_get_disk_io_stats()</strong> Give in bytes input ouput of each disks</li>
<li><strong>sg_get_disk_io_stats_diff()</strong> Give the difference with the previous io_stats</li>
<li><strong>sg_get_error()</strong></li>
<li><strong>sg_get_error_arg()</strong></li>
<li><strong>sg_get_error_errno()</strong></li>
<li><strong>sg_get_fs_stats()</strong> Return infos about filesystem (bugged), free_blocks, total ..</li>
<li><strong>sg_get_host_info()</strong> Return basically the same than uname -a</li>
<li><strong>sg_get_load_stats()</strong> Return the average since 1 minute, 5 minutes and 15 minutes</li>
<li><strong>sg_get_mem_stats()</strong> Return total, free, cache and used of the RAM</li>
<li><strong>sg_get_network_iface_stats()</strong> Return network interfaces and theirs status</li>
<li><strong>sg_get_network_io_stats()</strong> Return input ouput in bytes on each interfaces (and errors..)</li>
<li><strong>sg_get_network_io_stats_diff()</strong> Return the difference with the last io_stats()</li>
<li><strong>sg_get_page_stats()</strong></li>
<li><strong>sg_get_page_stats_diff()</strong></li>
<li><strong>sg_get_process_count()</strong> Return informations about processes</li>
<li><strong>sg_get_process_stats()</strong> Return informations about all process</li>
<li><strong>sg_get_swap_stats()</strong> Same as mem_stats but not with cache</li>
<li><strong>sg_get_user_stats()</strong></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Example </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">statgrab</span> <span class="kn">as</span> <span class="nn">stg</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="ow">not</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_init</span><span class="p">():</span> <span class="c">#Initialise the monitor. You could not call any function if you didn&amp;rsquo;t initialized monitoring.</span>
</span><span class='line'>  <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">res</span> <span class="o">=</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_cpu_percents</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">!!</span> <span class="n">The</span> <span class="n">problem</span> <span class="k">with</span> <span class="n">the</span> <span class="n">module</span> <span class="ow">is</span> <span class="n">that</span> <span class="n">the</span> <span class="nb">object</span> <span class="n">returned</span> <span class="ow">is</span> <span class="n">a</span> <span class="n">Result</span> <span class="k">class</span> <span class="nc">so</span> <span class="n">there</span> <span class="ow">is</span> <span class="n">two</span> <span class="n">solution</span> <span class="n">to</span> <span class="n">exploit</span> <span class="n">results</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="n">First</span> <span class="n">Solution</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">you</span> <span class="n">loop</span> <span class="n">trough</span> <span class="n">items</span> <span class="n">knowing</span> <span class="ow">in</span> <span class="n">advance</span> <span class="nb">all</span> <span class="n">the</span> <span class="n">keys</span><span class="o">.</span> <span class="n">ex</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">kernel</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">iowait</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">idle</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">swap</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nice</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">user</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;):</span> <span class="c">#time_taken ..</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">k</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="p">],</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">kernel</span> <span class="p">:</span>  <span class="mf">0.531929373741</span> <span class="o">%</span>
</span><span class='line'><span class="n">iowait</span> <span class="p">:</span>  <span class="mf">0.00408129952848</span> <span class="o">%</span>
</span><span class='line'><span class="n">idle</span> <span class="p">:</span>  <span class="mf">97.5757064819</span> <span class="o">%</span>
</span><span class='line'><span class="n">swap</span> <span class="p">:</span>  <span class="mf">0.0</span> <span class="o">%</span>
</span><span class='line'><span class="n">nice</span> <span class="p">:</span>  <span class="mf">0.0</span> <span class="o">%</span>
</span><span class='line'><span class="n">user</span> <span class="p">:</span>  <span class="mf">1.8923625946</span> <span class="o">%</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">Solution</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">you</span> <span class="n">can</span> <span class="n">convert</span> <span class="n">Result</span> <span class="k">class</span> <span class="nc">to</span> <span class="n">dictionnary</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">import</span> <span class="nn">ast</span>
</span><span class='line'><span class="n">dic</span> <span class="o">=</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">dic</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">k</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">v</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_disk_io_stats</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">disk</span> <span class="ow">in</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_disk_io_stats</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">disk</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">disk_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;],</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="n">tRead</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">disk</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">read_bytes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">/</span><span class="mi">1000</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">KB</span>\<span class="n">t</span>\<span class="n">tWrite</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">disk</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">write_bytes</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">/</span><span class="mi">1000</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">KB</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">sda</span>     <span class="n">Read</span><span class="p">:</span>  <span class="mi">814150</span> <span class="n">KB</span>        <span class="n">Write</span><span class="p">:</span>  <span class="mi">1347350</span> <span class="n">KB</span>
</span><span class='line'><span class="n">sdb</span>     <span class="n">Read</span><span class="p">:</span>  <span class="mi">11636</span> <span class="n">KB</span>     <span class="n">Write</span><span class="p">:</span>  <span class="mi">0</span> <span class="n">KB</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_host_info</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">res</span> <span class="o">=</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_host_info</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="p">))</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">k</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">v</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">uptime</span> <span class="p">:</span>  <span class="mi">11135</span>
</span><span class='line'><span class="n">os_name</span> <span class="p">:</span>  <span class="n">Linux</span>
</span><span class='line'><span class="n">os_version</span> <span class="p">:</span>  <span class="c">#1 SMP Fri Apr 6 05:01:55 UTC 2012</span>
</span><span class='line'><span class="n">hostname</span> <span class="p">:</span>  <span class="n">PC</span>
</span><span class='line'><span class="n">platform</span> <span class="p">:</span>  <span class="n">x86_64</span>
</span><span class='line'><span class="n">os_release</span> <span class="p">:</span>  <span class="mf">3.1</span><span class="o">.</span><span class="mi">0</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="n">amd64</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_mem_stats</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Memory</span> <span class="p">(</span><span class="n">RAM</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_mem_stats</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="p">))</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">/</span> <span class="mi">1000000</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">MB</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">total</span> <span class="mi">8372</span> <span class="n">MB</span>
</span><span class='line'><span class="n">cache</span> <span class="mi">1769</span> <span class="n">MB</span>
</span><span class='line'><span class="n">used</span> <span class="mi">4549</span> <span class="n">MB</span>
</span><span class='line'><span class="n">free</span> <span class="mi">3822</span> <span class="n">MB</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">This</span> <span class="ow">is</span> <span class="n">exactly</span> <span class="n">the</span> <span class="n">same</span> <span class="k">with</span> <span class="n">sg_get_swap_stats</span><span class="p">()</span> <span class="n">but</span> <span class="ow">not</span> <span class="k">with</span> <span class="n">cache</span> <span class="n">attribute</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_network_iface_stats</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">iface</span> <span class="ow">in</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_network_iface_stats</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">iface</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">interface_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">+&amp;</span><span class="n">ldquo</span><span class="p">;:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">up</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">if</span> <span class="n">iface</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">up</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;]</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">down</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">lo</span><span class="p">:</span> <span class="n">up</span>
</span><span class='line'><span class="n">wlan0</span><span class="p">:</span> <span class="n">up</span>
</span><span class='line'><span class="n">eth0</span><span class="p">:</span> <span class="n">up</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_network_io_stats</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">iface</span> <span class="ow">in</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_network_io_stats</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">iface</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">interface_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span><span class="o">+&amp;</span><span class="n">ldquo</span><span class="p">;:</span> <span class="n">Input</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">iface</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ipackets</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">Kb</span>\<span class="n">tOutput</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="n">iface</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">opackets</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Kb</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">lo</span><span class="p">:</span> <span class="n">Input</span><span class="p">:</span> <span class="mi">0</span> <span class="n">Kb</span> <span class="n">Output</span><span class="p">:</span> <span class="mi">0</span> <span class="n">Kb</span>
</span><span class='line'><span class="n">wlan0</span><span class="p">:</span> <span class="n">Input</span><span class="p">:</span> <span class="mi">794</span> <span class="n">Kb</span>    <span class="n">Output</span><span class="p">:</span> <span class="mi">554</span> <span class="n">Kb</span>
</span><span class='line'><span class="n">eth0</span><span class="p">:</span> <span class="n">Input</span><span class="p">:</span> <span class="mi">0</span> <span class="n">Kb</span>   <span class="n">Output</span><span class="p">:</span> <span class="mi">0</span> <span class="n">Kb</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_process_count</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">res</span> <span class="o">=</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_process_count</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">ast</span><span class="o">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">res</span><span class="p">))</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">zombie</span> <span class="mi">0</span>
</span><span class='line'><span class="n">running</span> <span class="mi">2</span>
</span><span class='line'><span class="n">total</span> <span class="mi">175</span>
</span><span class='line'><span class="n">stopped</span> <span class="mi">1</span>
</span><span class='line'><span class="n">sleeping</span> <span class="mi">172</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">sg_get_process_stats</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">res</span> <span class="o">=</span> <span class="n">stg</span><span class="o">.</span><span class="n">sg_get_process_stats</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Number</span> <span class="n">Processes</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">CPU</span>\<span class="n">tUID</span>\<span class="n">tGID</span>\<span class="n">tPID</span>\<span class="n">tName</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
</span><span class='line'>  <span class="k">print</span> <span class="nb">round</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">cpu_percent</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;],</span><span class="mi">2</span><span class="p">),</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="n">t</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">p</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">uid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;],</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>\<span class="n">t</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">p</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;],</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">t</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="n">p</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">pid</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;],</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>\<span class="n">t</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="n">p</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">process_name</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">CPU</span> <span class="n">UID</span>     <span class="n">GID</span> <span class="n">PID</span> <span class="n">Name</span>
</span><span class='line'><span class="mf">0.01</span>    <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">1</span>   <span class="n">init</span>
</span><span class='line'><span class="mf">0.0</span>     <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">2</span>   <span class="n">kthreadd</span>
</span><span class='line'><span class="mf">0.0</span>     <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">3</span>   <span class="n">ksoftirqd</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="mf">0.0</span>     <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">6</span>   <span class="n">migration</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="mf">0.0</span>     <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">7</span>   <span class="n">watchdog</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="mf">0.0</span>     <span class="mi">0</span>   <span class="mi">0</span>   <span class="mi">8</span>   <span class="n">migration</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2011/06/13/python-memo/"/>
    <updated>2011-06-13T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2011/06/13/python-memo</id>
    <content type="html"><![CDATA[<br/>


<ul>
    <li><strong>compile()</strong>
    Can compile on the fly new python code with the given string into python instructions
<br/>
<code>
&gt;&gt;&gt; eval_code = compile('100 + 200', '', 'eval')<br/>
&gt;&gt;&gt; eval(eval_code)<br/>
300
</code><br/>
<span style="color: #0000ff;">Note:It can also compile all file etc.</span></li>
<br/>
    <li><strong>sys.exitfunc()</strong>
Do nothing by default, but can be overwritten and is called when sys.exit() is called<br/>
<code>import sys<br/>
def my_exit_func(old_exit = prev_exit_func):<br/>
&nbsp;&nbsp;&nbsp;&nbsp;# perform cleanup<br/>
sys.exitfunc = my_exit_func #Override old function with our.
</code>
</li>

<br/>
    <li><strong>urlparse</strong>
    with URL component:Â <em>scheme://net_loc/path;params?query#frag</em><br/>
<code>
import urlparse<br/>
urlparse("http://www.google.fr/test/index.html?val=1&amp;test=2#foo")<br/>
ParseResult(scheme='http', netloc='www.google.fr', path='/test/index.html', params='', query='val=1&amp;test=2', fragment='foo')<br/>
#note: Â urlunparse do exactly the reverse and take a tuple of 6
</code>
<br/>
<li><strong>urlencode</strong><br/>
<code>
import urllib<br/>
aDict = { 'name': 'Georgina Garcia', 'hmdir': '~ggarcia' }<br/>
urllib.urlencode(aDict)<br/>
'name=Georgina+Garcia&amp;hmdir=%7eggarcia'<br/>
</code>
</li>

<br/>
<li><strong>Call C functions Windows</strong><br/>
<code>
from ctypes import cdll<br/>
msvcrt = cdll.msvcrt #Printf is in the msvcrt DLL<br/>
message = "Hello World!\n"<br/>
msvcrt.printf("Testing: %s", message)<br/>
</code>
</li>
<br/>

<li><strong>Call C functions Linux</strong><br/>
<code>
from ctypes import *<br/>
libc = CDLL("libc.so.6")<br/>
message_string = "Hello world!\n"<br/>
libc.printf("Testing: %s", message_string)<br/>
</code>
</li>

</ul>


<br/><br/>




<h3> Other memo </h3>




<ul>
    <li><p>str = "Python"<br/>
    <strong>'ton' in str</strong> Return false could be used with a if without regex<br/>
    <strong>'thon' in str</strong> Return true</p></li>

<br/>
<li><p><strong>[i for i in range(10)]</strong> # Return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br/>
<strong>[i for i in range(10) if i % 2 == 0] </strong># Return [0, 2, 4, 6, 8]<br/>
<strong>[i*2 for i in range(10)]</strong> # Return [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]<br/>
So it is possible in one line to pass through all array element and do something on them (but not printing)</p></li>
<br/>
    <li>Ternary operator: <strong>C ? T : F</strong> means: if T if C else F</li>
<br/>
<li>max = x if x &gt; y else Y</li>
<br/>
<li>MD5 usage:<br/>
<code>
from hashlib import md5<br/>
hash = md5("Hello world")<br/>
print hash.digest().encode('hex')<br/>
</code>
</li>

<br/>

<li><strong>sys.stdout.write("Hello World\n")</strong> alternate way to print Hello world writing directly stdout</li>

<br/>

    <li><strong>sys.stdin.readline()</strong> read directly a line on the stdin</li>
<br/>

    <li><strong>print(text, end=" ") </strong> in python 3.x define the end character instead of jump line it will add a space</li>
<br/>

    <li>Anonymous function:<br/> def add-one(x): <br/>&nbsp;&nbsp;&nbsp;&nbsp;return x + 1<br/> Could be substitued by: <br/><strong>add_one = lambda x: x + 1</strong></li><br/>
    <li><span style="text-decoration: underline;">Procedural</span>: <strong>my_str = string.split(my_str)</strong><span style="color: #0000ff;"> #Note: Need to import string</span></li>
    <li><span style="text-decoration: underline;">Object Oriented</span>: <strong>my_str = my_str.split()</strong> <span style="color: #0000ff;">#Note: Could create a string on the fly if needed with: ''.split()</span></li><br/>
    <li><strong>round()</strong> Round the float to the given precision ex: <br/><span style="color: #008000;">'%.2f' % round(1.185, 2) # Return 1.19</span></li><br/>
    <li><strong>isinstance()</strong></li>
    <li><strong>issubclass()</strong> <span style="color: #0000ff;">#Note: without self it is a static function attribute</span></li><br/>
    <li><strong>cmp()</strong> Compare two object, return 0 if equal</li>
    <li><strong>str()</strong> Return a printable format of an object</li><br/>
    <li>String formating <br/><strong>"Name: %s, age: %d" % ('Dave',23)</strong> Specify the type expected for variable <strong><br/>"Name: {0}, age: {1}".format('Dave',23)</strong> Here format determine the type of the variableso it works in all cases.</li><br/>
    <li><strong>"My string".replace("i","j")</strong> Easy way to replace elements in a string</li>
    <li><strong>"My string".find("my")</strong> -1 not found, 0 equal, 2 found <span style="color: #0000ff;">Note: This two do not support regular expression</span></li><br/>
    <li><strong>"My string".center(25)</strong> Return the string with 25 spaces before and after</li><br/>
    <li>Miscellanous string transformations<br/> test = "python is cool" <br/><strong>test.title()</strong> Return "Python Is Cool" <br/><strong>test.swapcase()</strong> Return "pYTHON iS cOOL" <br/><strong>test.isalpha() </strong>Return True if ALL character are alphabetics (.!, excluded)</li><br/>
    <li>test = [2,1,5,3] <strong>test.sort()</strong> <br/>Return [1, 2, 3, 5]</li><br/>
    <li><strong>y = copy.deepcopy(x)</strong> <br/>Copy object into x and not only just references, because otherwise change y modify x also. <span style="color: #0000ff;"><br/>Note: Originally made for compute efficiency reasons.</span></li><br/>
    <li><strong>ord('A')</strong> Return the decimal value of 'A' (65)</li>
    <br/>

    <li><strong>sum([2,3,4])</strong>
Return the sum of the list</li>
<br/>
    <li><strong>int("4")</strong>
This transform the string 4 into integer 4
<span style="color: #0000ff;">Note: It is the same for float(), and complex()</span></li>
<br/>
    <li><strong>del(self)</strong>
Kill an object itself</li>
<br/>
    <li><strong>def my_func(a=0,b=0)</strong>
Could specify the name of a variable in a function call ex:
my_fun(b=0) <span style="color: #0000ff;"># if we had put only 0 it would be the "a" variable</span></li>
<br/>
    <li><strong>global var</strong> #define a global variables</li>
    <li><strong>local var </strong> #define a variable in the block</li>
<br/>
    <li><strong>var1 = var2 = "hello" </strong>#Assign the same value for two differents variables</li>
    <li><strong>var1,var2 = "Hello",1 </strong> #Assign two variables on one line</li>
<br/>
    <li><span style="color: #0000ff;">Note : raw_input doesn't exist anymore in python 3.2 and input accept string in 3.2</span></li>
<br/>
    <li> Other types:
<strong>- complex</strong>
<strong>- bool</strong></li>
<br/>
    <li><strong>*</strong> is a tuple</li>
    <li><strong>**</strong> is a dictionnary
#used for varargs's declaration</li>
<br/>
    <li>Dictionnary
<strong>d.get{'key1',"N/A"} </strong> # Return the key if it exists the 2nd argument if not.
<strong>c = set(a)</strong> # Create a set with "a" a list</li>
<br/>
    <li>IN PYTHON 3 a string is a byte array with an encoding. So a string is excpected you should use:
<strong>bytes('my message\n','utf-8')</strong>
#Or Send directly the string but could fail</li>
</ul>

]]></content>
  </entry>
  
</feed>
