<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Robin David]]></title>
  <link href="http://www.robindavid.fr/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://www.robindavid.fr/"/>
  <updated>2014-03-02T11:00:09+00:00</updated>
  <id>http://www.robindavid.fr/</id>
  <author>
    <name><![CDATA[Robin David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Debootstrap]]></title>
    <link href="http://www.robindavid.fr/blog/2011/08/10/use-debootstrap/"/>
    <updated>2011-08-10T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2011/08/10/use-debootstrap</id>
    <content type="html"><![CDATA[<p>&nbsp;</p>

<ul>
    <li><strong>parted</strong>
Create partition in primary/extented in mbr/gpt...</li>
&nbsp;
    <li> <strong>mkfs.ext4 -L MyPartition /dev/sda1</strong>
Create the file system on the main system partition</li>
&nbsp;
    <li> <strong>mkdir /media/debian</strong>
Create a temp directory in which the partition will be mounted and the system installed</li>
&nbsp;
    <li> <strong>mount /dev/sda1 /media/debian</strong>
Mount the partition in the created directory</li>
&nbsp;
    <li> <strong>debootstrap wheezy /media/debian http://ftp.fr.debian.org/debian</strong>
Make a deboostrap of the wheezy version of debian(could be changed as you wish), from the nearest repository.</li>
&nbsp;
    <li> <strong>mount -o bind /dev /media/debian/dev</strong>
Bind dev</li>
&nbsp;
    <li> <strong>mount -o bind /dev/pts /media/debian/dev/pts</strong>
Bind /dev/pts</li>
&nbsp;
    <li> <strong>mount sysfs -t sysfs /media/debian/sys</strong>
mount sysfs</li>
&nbsp;
    <li> <strong>mount proc -t proc /media/debian/proc</strong>
Bind proc</li>
&nbsp;
    <li> <strong>touch /media/debian/etc/debian_chroot</strong>
Allow to show on the prompt if chrooted or not (avoid misuse)
<span style="color: #339966;">Ex: echo "mychroot" </span></li>
&nbsp;
    <li> <strong>chroot /media/debian</strong>
Now chrooted !</li>
&nbsp;
    <li> <strong>aptitude update</strong>
<span style="color: #0000ff;">Note: All the following operation uses host kernel </span></li>
&nbsp;
    <li> <strong>aptitude install locales console-data vim bash-completion dialog</strong>
locales language
console-data (keyboard)</li>
&nbsp;
    <li> <strong>dpkg-reconfigure locales</strong>
setup language</li>
&nbsp;
    <li> #<strong>aptitude install eatmydata</strong>
To improve performance of download and install packets by hooking sync kernel calls</li>
&nbsp;
    <li> <strong>vim /etc/bash.bashrc</strong>
You should uncomment completion stuff</li>
&nbsp;
    <li> <strong>source /etc/bash_completion</strong>
Apply changes</li>
&nbsp;
    <li> <strong>aptitude install linux-image-xxxx-amd64 grub</strong>
Put new kernel and setup grub entirely
For hard drive choose sda not sda1, and do the following command if the install don't do it itself.
grub-install /dev/sda
update-grub
update-initramfs</li>
    <li></li>
&nbsp;
    <li> <strong>aptitude install gpm</strong>
to get the mouse in console, to easily do copy past
<span style="color: #0000ff;">Note: Ignore errors if it happens</span></li>
&nbsp;
    <li> <strong>vim /etc/hostname</strong>
if needed/wanted</li>
&nbsp;
    <li> <strong>vim /etc/network/interfaces</strong>
Put in:
auto lo
iface lo inet loopback
<span style="color: #0000ff;">Note: Otherwise lots of applications will crash because dbus and others applications use local network and if he doesn't find it in etc/network the system will become unstable. </span></li>
&nbsp;
    <li> <strong>vim /etc/fstab</strong>
Adapt depending of needs
UUID=xxxx   /   btrfs   defaults... 0   0
root 1, home 2, tmp 0
<span style="color: #0000ff;">Note you can use blkid /dev/sda1 to get uuid of partitions.</span></li>
&nbsp;
    <li> <strong>passwd</strong>
Otherwise at the reboot a passwd will be asked without being set before.</li>
&nbsp;
    <li> <strong>#Bonus tasksel</strong>
<span style="color: #339966;">ex: tasksel install standard</span>
This install standard utilities like less, top ..</li>
&nbsp;
    <li> <strong>exit</strong>
Back on host !</li>
&nbsp;
    <li>Umount everything or directly reboot</li>
</ul>


<p>Enjoy you&rsquo;re new system :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xdotool + xwininfo Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2011/04/24/xdotool-xwininfo-memo/"/>
    <updated>2011-04-24T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2011/04/24/xdotool-xwininfo-memo</id>
    <content type="html"><![CDATA[<p>First of all, I know that the text written below could be found in the xdotool man, but this summarize it and allow a quick acess to few examples and the more important arguments.</p>

<p>I discovered it quite randomly by looking for a way to access keyboard keys in python. I finally analysed what we could do with xdotool it is really amazing. xdotool is a software which allow manipulate keyboard, mouse and windows of the X server. It can by this way completely replace the user in front of his computer, and allow automate tasks that cannot be done in command line. It is the Unix equivalent for AutoIt in Windows. This increase considerably the power of bash scripts and consolidate my idea that we can do almost everything in bash. Below the more interesting commands:</p>

<p>&nbsp;</p>

<ul>
    <li><strong>xdotool getactivewindow</strong>
Return the active window</li>
<br/>
    <li><strong>xwininfo -id 2784333</strong>
Give information about the given window, like size, coordinate and graphical aspect</li>
<br/>
    <li> <strong>xdotool getmouselocation --shell</strong>
Return the mouse location, with X, Y and the Display Number(could have multiple X server)
--sheel format the returned string to be "eval" if needed.

The script below show in live the mouse position.
<pre>
<span style="color: #009900;">#!/bin/bash</span>

<span style="color: #0000ff;">while</span> ((<span style="color: #ff0000;">1</span>)) ; <span style="color: #0000ff;">do</span>
        eval $(xdotool getmouselocation --shell)
        echo -e <span style="color: #888888;">"X=$X\tY=$Y\r\c"</span>
<span style="color: #0000ff;">done</span></pre></li>
<br/>
    <li>Send Keys:
<strong>xdotool key F2</strong>
It exist also keydown, and keyup which I think could be understood as keypressed and key released(not tested)</li>
<br/>
    <li>Type text:
<strong>xdotool type 'Hello world!'</strong>Type the given text as if it were the user.</li>
<br/>
    <li>Mouse move:
<strong>xdotool mousemove 0 0</strong>
Move the mouse cursor to the position x=0, y=0</li>
<br/>
    <li><strong>xdotool mousemove_relative 10 10</strong>
Same as mousemove but relatively to the current position of the mouse</li>
<br/>
    <li>Click:
<strong>xdotool click 1</strong>
<span style="color: #0000ff;">Note 1:Left, 2:Middle, 3:Right, 4:wheel up, 5:wheel down</span>
There is also mouseup and mousedown (which is the same than keys of keyboard)</li>
<br/>
    <li>Search
<strong>xdotool search --onlyvisible --name "^Opera$"</strong>
Research in window name with the regex pattern given
The other interesting args are:
--pid PID #specify a pid(more accurate than string search and unique)</li>
<br/>
    <li><strong>getwindowfocus</strong> Return the window focused</li>
<br/>
    <li><strong>xdpyinfo | awk '/dimensions:/ {split($2,nf,"x");print "width="nf[1];print "height="nf[2];exit }'</strong>
This have nothing to see with xdotool but return screen resolution in a formated way to be eval in bash</li>
<br/>
    <li><strong>xdotool windowsize 3447722 300 300</strong> Change the size of the given window</li>
<br/>
    <li><strong>xdotool windowmove 34734345 200 200</strong>
Move the given window to the given position</li>
<br/>
    <li><strong>xdotool windowmap 34734345 200 200</strong>
Put the given window on the foreground(normally)
The reverse is "windowunmap" which hide the given window</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Networked Services memo]]></title>
    <link href="http://www.robindavid.fr/blog/2010/11/14/networked-services/"/>
    <updated>2010-11-14T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2010/11/14/networked-services</id>
    <content type="html"><![CDATA[<h3>Basic admin</h3>




<ul>
    <li><strong>?</strong> -&gt; wildcard for one char</li><br/>
    <li><strong>chgrp</strong>: change the group of a file or a folder</li><br/>
    <li><strong>du -s -h [folder] </strong> give you the total file size of the folder or a file</li><br/>
    <li><strong>umask</strong> example to give rwx-r-x---x (751) umask -&gt; 026</li><br/>
    <li><strong>sort -n -k 4 -t ":"</strong> : sort numerically using the column 4 using the character separator ":"</li><br/>
    <li><strong>find /home -newer file </strong> Find in /home files newer than "file"</li><br/>
    <li><strong>find /usr/ -size -2 -exec cp {} /home/ \; </strong> find in /usr files lower than 2 blocs and copy them to /home/</li><br/>
    <li><strong>egrep "a.*e.*i.*u.*o" /root/words </strong> grep lines containing in the order a e i o u</li><br/>
    <li><strong>egrep "(.{4}).*\1" /root/words </strong> grep lines containing at least two times the same pattern of 4 chars</li><br/>
    <li><strong>pidof syslogd </strong> get the pidof syslog</li><br/>
    <li><strong>chkconfig --list</strong> list the services theirs run level etc</li><br/>
    <li><strong>tcpdump -i eth0 not port 23 and not port 22 </strong> capture traffic of eth0 but not incoming from port 22 and 23</li><br/>
    <li><strong>ip route</strong>: show a basic routing table</li>
</ul>


<br/><br/>




<h3>Networking</h3>


<ul>
    <li>Configuring manually ip with ifconfig:
<ul>
    <li><strong>ifconfig eth0 10.0.50.10 broadcast 10.0.50.255 netmask 255.255.255.0</strong></li>
</ul>
</li><br/>
    <li>Configuring manually ip with ip:
<ul>
    <li><strong>ip route append 10.0.50.10 dev eth0 table main</strong></li>
    <li><strong>ip route append default via 10.0.50.254</strong></li>
</ul>
</li><br/>
    <li><strong>route -n</strong>: show the routing table</li><br/><li><strong>cat /proc/net/arp</strong>: show MAC address, in memory</li>
    <li>Run level directory: <strong>/etc/rd?.d</strong></li>
    <li>Runlevel states are:</li>
    <li>
<ul>
    <li>– D uninterruptible sleep (usually IO)</li>
    <li>– R runnable (on run queue)</li>
    <li>– S sleeping</li>
    <li>– T traced or stopped</li>
    <li>– W paging</li>
    <li>– X dead</li>
    <li>– Z a defunct ("zombie") process</li>
    <li>– W has no resident pages</li>
    <li>– &lt; high-priority process</li>
    <li>– N low-priority task</li>
    <li>– L has pages locked into memory (for real-time and custom IO)</li>
</ul>
</li><br/>
    <li>Change runlevel for X:
<ul>
    <li><strong>chkconfig --levels 345 X off</strong></li>
</ul>
</li>
</ul>


<br/><br/>


<h3>Firewall</h3>


<h1>!/bin/bash<br/></h1>

<br/>


<p>iptables -F INPUT<br/>
iptables -F OUTPUT<br/>
iptables -F FORWARD<span style="color: #0000ff;">#flush all rules</span><br/></p>

<br/>


<p>iptables -P INPUT ACCEPT<br/>
iptables -P OUTPUT ACCEPT<br/>
iptables -P FORWARD DROP<span style="color: #0000ff;">#define a default policy for a chain</span><br/></p>

<br/>


<p>iptables -A INPUT -i eth0 -p tcp &mdash;dport http -j DROP <span style="color: #0000ff;">#drop all the incoming http traffic on eth0</span><br/>
iptables -A INPUT -i eth0 -p tcp -s 20.0.0.0/24 -j DROP <span style="color: #0000ff;">#drop all incoming connection from the given network</span><br/></p>

<br/>


<p>iptables -A INPUT -p icmp &mdash;icmp-type echo-request -m limit &mdash;limit 1/second -j ACCEPT<br/>
iptables -A INPUT -p icmp &mdash;icmp-type echo-request -j DROP <span style="color: #0000ff;">#accept ping at a limit of 1 per second</span><br/></p>

<br/>


<p>iptables -A INPUT -i eth0 -p tcp &mdash;dport ssh -s ! 10.200.0.1 -j REJECT<span style="color: #0000ff;">#reject all incoming ssh connection except coming from 10.200.0.1(don&rsquo;t mean it&rsquo;s accepted</span><br/>
iptables -A INPUT -i eth0 -p tcp &mdash;dport ssh -s ! 10.0.0.0/16 -j ACCEPT<span style="color: #0000ff;">#accept all incoming ssh connection which come from anywhere else than 10.0.0.0/16 (so 10.200.0.1 accepted)</span><br/></p>

<br/>


<p>iptables -A INPUT -m state &mdash;state ESTABLISHED,RELATED -j ACCEPT<span style="color: #0000ff;">#accpet incoming, related or established connection</span><br/></p>

<br/><br/>




<h3>Apache</h3>


<ul>
    <li><strong>UserDir disable</strong> Comment it in httpd.conf or apache2.conf to allow users public_html</li>
    <li><strong>NameVirtualHost *:80</strong> Uncomment it in the case it is</li>
    <li><strong>Basic virtual host</strong></li>
</ul>


<div id="_mcePaste" style="padding-left: 30px;">&lt;VirtualHost *:80&gt;</div>


<div id="_mcePaste" style="padding-left: 60px;">ServerAdmin robin@robindavid.fr</div>


<div id="_mcePaste" style="padding-left: 60px;">DocumentRoot /home/robin/public_html/web</div>


<div id="_mcePaste" style="padding-left: 60px;">ServerName mywebsite.robindavid.fr</div>


<div style="padding-left: 60px;">ErrorLog logs/mywebsite.robindavid.fr-error_log</div>


<div id="_mcePaste" style="padding-left: 60px;">CustomLog logs/mywebsite.robindavid.fr-access_log common</div>


<div id="_mcePaste" style="padding-left: 30px;">&lt;/VirtualHost&gt;</div>


<div></div>


<br/>


<div>
<ul>
    <li><strong>More complex virtual host</strong></li>
</ul>
<div style="padding-left: 30px;">&lt;VirtualHost *:80&gt;</div>
<div style="padding-left: 60px;">ServerAdmin robin@robindavid.fr</div>
<div id="_mcePaste" style="padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 60px; margin: 0px;">DocumentRoot /home/robin/public_html/web</div>
<div id="_mcePaste" style="padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 60px; margin: 0px;">ServerName mywebsite.robindavid.fr</div>
<div>
<div style="padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 60px; margin: 0px;">ErrorLog logs/mywebsite.robindavid.fr-error_log</div>
<div id="_mcePaste" style="padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 60px; margin: 0px;">CustomLog logs/mywebsite.robindavid.fr-access_log common</div>
</div>
<div style="padding-left: 60px;">ServerAlias web.robindavid.fr <span style="color: #0000ff;">#give virtual host alias</span></div>
<div style="padding-left: 60px;"><span style="color: #0000ff;"> </span>RewriteEngine on<span style="white-space: pre;"> </span><span style="color: #0000ff;">#activate rewrite engine</span></div>
<div style="padding-left: 60px;"><span style="color: #0000ff;"> </span>RewriteCond %{HTTP_HOST} ^website\.<span style="white-space: pre;"> </span><span style="color: #0000ff;">#if host address start by website</span><span style="white-space: pre;"> </span></div>
<div style="padding-left: 60px;"><span style="white-space: pre;"> </span>RewriteCond %{REQUEST_URI} !~robin<span style="white-space: pre;"> </span><span style="color: #0000ff;">#and uri does not contain ~robin</span></div>
<div style="padding-left: 60px;"><span style="color: #0000ff;"> </span>RewriteRule ^(.*)$ http://redirect.robindavid.fr$1 [L,R]<span style="white-space: pre;"> </span><span style="color: #0000ff;">#redirect the host to the given host keeping the same path</span></div>
<div style="padding-left: 30px;">&lt;/VirtualHost&gt;</div>
<div style="padding-left: 30px;"></div><br/><br/>

<div>
<ul>
    <li>Allow user to use authentication. Add before # &lt;Directory /home/*/public_html&gt;:</li>
</ul>
<div style="padding-left: 60px;">&lt;Directory /home/*/public_html&gt;</div>
<div style="padding-left: 60px;">AllowOverride AuthConfig</div>
<div style="padding-left: 60px;">&lt;/Directory&gt;</div>
<div style="padding-left: 60px;"></div>
</div><br/>

<div>
<ul>
    <li><strong>htpasswd -s mypassfile richard</strong>
<ul>
    <li>#add user richard in mypassfile</li>
    <li># -s force usage of SHA(optionnal)</li>
</ul>
</li>
</ul>
</div><br/>
<div>
<ul>
    <li>Then in the folder you want to secure create a file .htaccess and put in:</li>
</ul>
<div style="padding-left: 30px;">AuthType Basic</div>
<div style="padding-left: 30px;">AuthName "Restricted Fodler !"</div>
<div style="padding-left: 30px;">AuthUserFile /home/robin/mypassfile</div>
<div style="padding-left: 30px;">Require user richard</div>
<div style="padding-left: 30px;"></div>
</div>
</div>


<ul>
    <li>For groups it's quite the same create a file in call mygroup
<ul>
    <li>put in magic: richard</li>
    <li>mean that richard is in the group magic</li>
</ul>
</li>
</ul>


<ul>
    <li>And the two following lines to the existing .htaccess
<ul>
    <li>AuthGroupFile /home/robin/mygroup</li>
    <li>Require group magic</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash tips]]></title>
    <link href="http://www.robindavid.fr/blog/2010/10/09/bash-tips/"/>
    <updated>2010-10-09T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2010/10/09/bash-tips</id>
    <content type="html"><![CDATA[<ul>
    <li><strong>${test?}</strong> return an error if the variable "test" is not initialized</li>
    <li><strong>$$</strong> return the script pid (eg: kill -15 `echo $$`) kill itself</li>
    <li><strong>mytable=(val1 val2 val3)</strong> initialize the table mytable with the given values</li>
    <li><strong>echo {1..10}</strong> print 1 2 3 4 5 6 7 8 9 10</li>
    <li><strong>expr</strong> allow you to do every operations, but interestingly fast because it's a builtin command</li>
    <li>embrace "{" and "}" permit to redirect a bloc of instructions into a file, or to read values from a file</li>
    <li><strong>xargs</strong> is powerfull and can for instance apply a command to the results of a pipe (eg:find / -name test | xargs rm -f)</li>
    <li><strong>tr 'a-z' 'A-Z'</strong> convert strings from lowercase to uppercase</li>
    <li><strong>&gt;|</strong> force the redirection even tough the noclobber is active</li>
    <li>To do a carrier return in bash with echo you need to use -e and \r\c (\c stop interpretation of following characters)</li>
    <li><strong>${!tab}</strong> return the last element of the table "tab"</li>
    <li><strong>exit $?</strong> or <strong>exit</strong> exit the script with the return value of the last command</li>
    <li><strong>exit</strong></li>
    <li>in conditions, the difference between [[ ]] and [ ] is that we can put || and &amp;&amp; in [[ ]] and not in [ ]</li>
    <li><strong>$SECONDS</strong> contains the execution duration since the beginning of the script</li>
    <li><strong>kill -s 14 $$</strong> send the signal 14 to the script itself, so after we can trap it with trap my_function 14</li>
    <li><strong>read -t 10 my_var</strong> read the variable "my_var" with a limit of 10 seconds</li>
    <li><strong>${my_var-"defaut"}</strong> initialize my_var with default value "default" if she hadn't been initialized yet</li>
    <li><strong>${param?msg_err}</strong> print "msg_err" if the variable param do not exists</li>
    <li><strong>${file%$ext}$newext</strong> it replace the extension of a $file with the $newext</li>
    <li><strong>${var:pos:len}</strong></li>
    <li><strong>${var/Model/Remplacment}</strong> replace first instance of Model in var</li>
    <li><strong>${var//Model/Remplacment}</strong> replace all instances</li>
    <li><strong>declare</strong> allow to declare differents variables<br/>
          -r static var<br/>
          -i integer<br/>
          -a table<br/>
          -f function<br/>
          (without argument print all previous declared functions)<br/>
          Note:only variables declared with declare are local in a function<br/>
          -x export the var in the shell<br/>
    </li>
    <li><strong>$RANDOM</strong> give a value between 0 and 32767 (with a expr command you can reduce it to the range you want)</li>
    <li><strong>(( t = a&lt;45?7:11 ))</strong> if a&lt;45 then t=7 else t=11</li>
    <li>set in bash can "explode" a var (like in PHP), depending of his value if IFS=" "var="Hello me", set $var we have now $1="Hello" and $2="me"</li>
    <li><strong>for name in $(awk 'BEGIN{FS=":"}{print $1}' &lt; /etc/passwd )</strong> retrieve all names in /etc/passwd (and use a specific IFS)</li>
    <li><strong>var=`&lt;file`</strong> or <strong>var=`cat file`</strong> there are the sames, it give to var the value of the content of file</li>
    <li><strong>pidof</strong> return the pidof of the given process name</li>
    <li>use -n with echo to do not jump to next ligne after the echo</li>
    <li><strong>wait $pid</strong> wait the end of the process given by the pid</li>
    <li>-exec of the command find allow to execute command for each file found by the find</li>
    <li><strong>ls | xargs -p -l gzip</strong> it will create an archive with all the files of the current directory</li>
    <li><strong>ls . | xargs -i -t cp ./{} /tmp</strong> it will copy of the files of the current directory into tmp</li>
    <li>the difference between cron and at is that cron is powerfull for common regularily tasks whereas at is better for isolated tasks</li>
    <li><strong>expand</strong> transform space into tab</li>
    <li><strong>unexpand</strong> do the reverse, transform tab into space</li>
    <li><strong>read var1 var2</strong> read to vars in one command</li>
    <li><strong>&amp;&amp;</strong> (command1 &amp;&amp; command2) return true only if the results of the two commands is true whereas ";" return the result of the second</li>
    <li><strong>||</strong> return true if one of the two commands is true</li>
    <li><strong>mv test{1,2} linuxtest{1,2}</strong> rename test1 in linuxtest1 and test2 in linuxtest2</li>
    <li><strong>uuencode</strong> and <strong>uudecode</strong> allow to code decode binary files in ASCII and reverse</li>
    <li><strong>ipcalc</strong> allow to do reverse DNS</li>
    <li><strong>reset</strong> really reset a prompt by cleaning verything printed before</li>
    <li><strong>script</strong> save all typed command in a file</li>
    <li><strong>bc</strong> permit to do operations on floating point <br/>Example: echo `echo "ibase=2; 0110" | bc` convert 0110 in hexa</li>
    <li><strong>units</strong> base converter</li>
    <li><strong>last</strong> allow you to see last incoming connections, reboot etc..</li>
    <li><strong>setterm</strong>
        <div style="padding-left: 30px;">Allow you to enable lot's of things in the bash like:</div>
        <div style="padding-left: 30px;">cursor on/off</div>
        <div style="padding-left: 30px;">bold on/off</div>
        <div style="padding-left: 30px;">underline on/off</div>
        <div style="padding-left: 30px;">Example: setterm bold on</div>
    </li>
    <li><strong>lsof</strong> show all opened files on the system</li>
    <li><strong>strace</strong> show system calls</li>
    <li><strong>ltrace</strong> show dynamic libraries calls</li>
    <li><strong>fuser</strong> identify PIDs which are accessing to a specific files or folder</li>
    <li><strong>lockfile /home/robin/test.lock</strong> will create a file test.lock, which will lock the file test</li>
    <li><strong>ulimit</strong> can limit, ressources given to a user like number of process, file sizes etc</li>
    <li><strong>ldd</strong> print dynamic libraries dependencies of a binary</li>
    <li><strong>cat - $file &lt;&lt;&lt;$title &gt; $file.new</strong> write $title at the top of $file and write the result in file.new</li>
    <li><strong>: &gt; file</strong> clear the given file</li>
    <li><strong>exec &lt; file</strong> execute, what there is in the file</li>
    <li><strong>$BASH_SUBSHELL</strong> show the subshell level where the variable is launched</li>
    <li><strong>diff &lt;(ls $first_directory) &lt;(ls $second_directory)</strong> will compare the two directories</li>
    <li>If you declare an exit function, when you will launch exit, it will call the function instead of the command</li>
    <li><strong>local var</strong> declare var as local variable</li>
    <li><strong>command1 &amp;&amp; command2</strong> play the role of a simple if, because command2 is executed only if command1 result return true</li>
    <li><strong>command1 || command2</strong> command2 is executed only if command1 result return an error</li>
    <li><strong>exec 5&lt;&gt;/dev/tcp/www.net.com/80</strong><span style="white-space: pre;"> </span>#open a socket which is send to the file descriptor 5<br/>
        <div style="padding-left: 30px;"><strong>echo -e "GET / HTTP/1.0\n" &gt;&amp;5</strong><span style="white-space: pre;"> </span>#we write in the file descriptor with a GET</div>
        <div style="padding-left: 30px;"><strong>cat &lt;&amp;5</strong><span style="white-space: pre;"><strong> </strong> </span>#we print what the server answer</div>
    </li>
    <li><strong>echo "0" &gt; /dev/ram0</strong> write 0 in the ram</li>
    <li><strong>read -p "Enter your name :" name</strong> read a var with a specific prompt</li>
    <li><strong>stat</strong> show metadata informations about files</li>
    <li><strong>update-rc.d [my service] [defaults, remove]</strong> allow to add or remove the given service at boot time</li>
    <li><strong>netcat -lvp [PORT] -e cmd.exe</strong> Redirect all input outputs to the given program (simple remote shell/backdoor with netcat)</li>
    <li><strong>file2cable -v -i [INTERFACE] -f [MY FILE]</strong> Send to file 'as is' on the network (so it would do better to contain frames encoded)</li>
    <li><strong>urlsnarf -i [INTERFACE]</strong> retrieve and print on output all URL's that transit through the interface</li>

    <li><strong>gunzip -dc ../initrd.gz |cpio -id</strong> decompress a initrd.gz file</li><br/>
        <li><strong>find . | cpio --quiet --dereference -o -H newc | gzip -9 &gt; ../initrd.gz</strong> recompress files in the current folder into a new custom initrd file</li>

</ul>

]]></content>
  </entry>
  
</feed>
