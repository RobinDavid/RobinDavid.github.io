<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robin David]]></title>
  <link href="http://www.robindavid.fr/atom.xml" rel="self"/>
  <link href="http://www.robindavid.fr/"/>
  <updated>2016-10-22T11:54:06+02:00</updated>
  <id>http://www.robindavid.fr/</id>
  <author>
    <name><![CDATA[Robin David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi: First Config and Services Configuration]]></title>
    <link href="http://www.robindavid.fr/blog/2013/01/28/raspberry-pi-first-config-and-services-configuration/"/>
    <updated>2013-01-28T00:00:00+01:00</updated>
    <id>http://www.robindavid.fr/blog/2013/01/28/raspberry-pi-first-config-and-services-configuration</id>
    <content type="html"><![CDATA[<h2>What is the Raspberry Pi ?</h2>
I think there's no need to present the Pi anymore. This is basically a whole computer embed on chip based on ARM. It has been designed by David Braben. The official site is the following: <a href="http://www.raspberrypi.org/">http://www.raspberrypi.org/</a>
<br/>
<h2>Initial configuration</h2>
Here is a small memo of the things I do when I configure a Pi for the first time.

The first thing is to connect to the Pi using ssh the default login is <strong>pi</strong> and the password is <strong>raspberry</strong>. <span style="color: #ff0000;">So this will be the first thing to change !</span>
<br/>
<strong>sudo su</strong><br/>
<strong>passwd</strong>
Set a root passwd which is not the case by default.<br/>

<strong>passwd pi</strong>
Change the pi passwd ! (you might also delete the user and create a new one)<br/>

<strong>visudo</strong>
Remove pi from sudoers<br/>

<strong>aptitude update</strong><br/>
<strong>aptitude safe-upgrade</strong><br/>
<strong>aptitude install vim host htop</strong><br/><br/>
# Network Configuration
<strong>vim /etc/hostname</strong><br/>
<strong>vim /etc/network/interfaces</strong><br/>
<pre>
#iface eth0 inet static
#     address 192.168.0.5
#     network 192.168.0.0
#     netmask 255.255.255.0
#     broadcast 192.168.0.255
#     gateway 192.168.0.1
</pre>
<strong>vim /etc/resolv.conf</strong><br/>

<strong>raspi-config</strong>
#To enlarge the filesystem, disable X, and change timezone<br/><br/>

The default package repository (mirrordirector.raspbian.org) is not really reliable, and an update should sometimes in my case be relaunch few times to get through. So I use another package repository:
<br/><strong>echo 'deb http://mirrors.ircam.fr/pub/raspbian/raspbian/ wheezy main contrib non-free rpi' &gt; /etc/apt/sources.list</strong><br/>

<h3>SSH Key exchange</h3>
For more simplicity I have put the public key of my main computer in the ssh authorized hosts of the pi to login automatically, here are the few steps to do.
<br/><br/>
On the local host:
<ul>
	<li><strong>ssh-keygen -t rsa</strong></li>
	<li><strong>scp .ssh/id_rsa.pub pi@192.168.0.5:~/</strong></li>
	<li><strong>echo 'alias copi="ssh pi@192.168.0.5 -X" ' &gt;&gt; ~/.bashrc</strong></li>
</ul>
On the pi:
<ul>
	<li><strong>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</strong></li>
	<li><strong>chmod 600 .ssh/authorized_keys</strong></li>
</ul>


<h2>Services configuration</h2>
Small memo of the operations to perform to configure some services on the Raspberry.<br/><br/><br/>
<h3>OpenVPN</h3>
The following tutorial is really perfect: <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=36&amp;t=21566">http://www.raspberrypi.org/phpBB3/viewtopic.php?f=36&amp;t=21566</a>
<br/>
<span style="color: #0000ff;">Note: instead of copy/pasting the server.conf given, copy the one located in /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz</span>



<br/><br/><br/>
<h3>Etherpad-lite</h3>
Etherpad-lite is a collaborative text editor written in node.js. The installation and configuration is made easy by the usage of a script available on Github <a href="https://github.com/ghoulmann/raspi-etherpad-lite">here</a>.
<br/>
The script is called install_raspi_etherpad-lite.sh. I am used to change the port in the file to 8081 so that I keep the 8080 for proxy stuff.
<br/><br/>
./install_raspi_etherpad-lite.sh
<br/><br/>
Now etherpad should be installed if no errors occurs. Except few things:
<br/>
<strong>ln -s /usr/bin/nodejs /usr/bin/node</strong> (cause etherpad intent to launch node while the package install a binary called nodejs)
<br/>
Then you can start the application with <strong>/etc/init.d/etherpad-lite start</strong> (The first time you launch it. It can take a while to install all the dependencies and due to the low performance of the Pi)



<br/><br/><br/>
<h3>Libreplan</h3>
Libreplan is a wonderful project management web application. <a title="Libreplan" href="http://www.libreplan.com/" target="_blank">http://www.libreplan.com/</a>
<br/>
Libreplan is not available in package repositories but .deb packages are provided on the official website. The only problem is that there is no package for armhf. The application itself is just a tomcat application so there is no reason for it not to work on arm platforms. We will just need to tweak the .deb package to replace the architecture to armhf. The commands to perform are:
<br/><br/>
<strong>wget http://sourceforge.net/projects/libreplan/files/LibrePlan/libreplan_1.3.3-1_i386.deb</strong><br/>
<strong>ar vx libreplan_1.3.3-1_i386.deb</strong><br/>
<strong>mkdir -p libreplan_1.2.3-1_armhf/DEBIAN</strong><br/>
<strong>tar -C libreplan_1.2.3-1_armhf/DEBIAN/ -xvf control.tar.gz</strong><br/>
<strong>tar -C libreplan_1.2.3-1_armhf -xvf data.tar.gz</strong><br/>
<strong>sed -i 's/Architecture: .*/Architecture: armhf/' libreplan_1.2.3-1_armhf/DEBIAN/control</strong><br/>
<strong>dpkg-deb --build libreplan_1.2.3-1_armhf/</strong><br/>
<strong>aptitude install libpg-java postgresql cutycapt postgresql-client xvfb dbconfig-common ucf tomcat6</strong><br/>
<strong>dpkg -i libreplan_1.2.3-1_armhf.deb</strong>
<br/><br/>
To resume what commands does. We first download the i386 version of Libreplan, then we extract the .deb and we recreate the directory structure of the package. We replace the architecture into the file <em>control</em> using <strong>sed</strong> and we rebuild the package with <strong>dpkg-deb</strong>. Then we just have to install the package dependencies and to install our brand new package. And it works ;)
<br/>
The server is now listening on the port 8080, and is accessible on http://192.168.0.5:8080/libreplan. Be sure to <span style="text-decoration: underline;">change the admin password</span> and be patient the pi will certainly suffer of the load ^^.
<br/><br/>
Note: I prefer launching this kind of service on demand so I remove it from startup with : <strong>update-rc.d tomcat6 remove</strong>

<br/><br/><br/>
<h3>Codiad IDE</h3>
Codiad IDE is a web based <a title="Codiad IDE website" href="http://codiad.com/" target="_blank">IDE</a>, which allow to create workspace and support many functionnalities like code coloration etc. It is pretty light and does not require any DB. There is no difficulties in installing Codiad.<br/> The following steps allow to install Codiad:
<br/><br/>
<strong>wget https://github.com/Codiad/Codiad/zipball/master</strong><br/>
<strong>unzip master</strong><br/>
<strong>cd Codiad-Codiad-961e711/ </strong><span style="color: #3366ff;">#Adapt to the current github commit</span><br/>
<strong>mkdir /var/www/codiad</strong><br/>
<strong>cp -r * /var/www/codiad/</strong><br/>
<strong>mv /var/www/codiad/config.example.php /var/www/codiad/config.php</strong><br/>
<strong>chmod o+w /var/www/codiad/config.php /var/www/codiad/data/ /var/www/codiad/workspace/</strong>
<br/><br/>
Then there is to possibilities, either you modify the config file to modify the root path of codiad either you create a VirtualHost.
<br/>
<strong><span style="text-decoration: underline;">1st method</span></strong>:
<ul>
	<li><strong>sed -i 's/^\$rel.*/\$rel = \"\/codiad\"\;/ /var/wwww/codiad/config.php</strong></li>
	<li><strong>touch /var/www/codiad/plugins.php</strong></li>
</ul>
<strong><span style="text-decoration: underline;">2nd method:</span></strong>
<ul>
	<li><strong>touch /var/www/codiad/plugins.php</strong></li>
	<li><strong>echo "Listen 8081" &gt;&gt; /etc/apache2/ports.conf</strong></li>
	<li><strong>vim &gt; /etc/apache2/sites-available/codiad</strong>
<pre>
&lt;VirtualHost *:8081&gt;
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/codiad
    &lt;Directory /&gt;
        Options FollowSymLinks
        AllowOverride None
    &lt;/Directory&gt;
    &lt;Directory /var/www/codiad&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
    &lt;/Directory&gt;
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
&lt;/VirtualHost&gt;
</pre>
</li>
	<li><strong>a2ensite codiad</strong></li>
	<li><strong>service apache2 reload</strong></li>
</ul>


<br/><br/>
<h3>OpenMediaVault</h3>
OpenMediaVault is a NAS that allow to get a good control on the system which allow to transform the pi into a fully featured NAS. There is no package available and the OMV package repository should be added to the sources.list and to add the key of the repository.
<br/><br/>
<strong>echo 'deb http://packages.omv-plugins.org fedaykin main' &gt;/etc/apt/sources.list.d/omv-plugins-org-fedaykin.list</strong><br/>
<strong>echo 'deb http://packages.omv-plugins.org fedaykin-armhf main' &gt;/etc/apt/sources.list.d/omv-plugins-org-fedaykin-armhf.list</strong><br/>
<strong>wget -O - http://packages.omv-plugins.org/apt/99omv-plugins-org &gt; /etc/apt/preferences.d/99omv-plugins-org</strong><br/>
<strong>wget -O - http://packages.omv-plugins.org/omv-plugins.pub|apt-key add -</strong>
<br/><br/>
Then openmediavault can be installed. (If the installation fail due to <strong>tftpd-hpa</strong> change <em>TFTP_OPTIONS</em> to <em>TFTP_OPTIONS="--secure --ipv4" in /etc/default/tftpd-hpa</em>)
<br/>
<strong>aptitude install openmediavault</strong>
<br/><br/>
You can also directly install OMV plugins from aptitude here are the available ones:
<ul>
	<li>openmediavault-autoshutdown - OpenMediaVault AutoShutdown</li>
	<li>openmediavault-clamav - OpenMediaVault ClamAV
p openmediavault-cups - OpenMediaVault CUPS (network printer server)</li>
	<li>openmediavault-dnsmasq - OpenMediaVault dnsmasq (local DNS and DHCP server)</li>
	<li>openmediavault-forkeddaapd - OpenMediaVault forked-daapd (DAAP server)</li>
	<li>openmediavault-git - OpenMediaVault Git (Git server)</li>
	<li>openmediavault-iscsitarget - OpenMediaVault iSCSI Enterprise Target</li>
	<li>openmediavault-ldap - OpenMediaVault Lightweight Directory Access Protocol (LDAP)</li>
	<li>openmediavault-lvm2 - OpenMediaVault Logical Volume Manager (LVM2)</li>
	<li>openmediavault-minidlna - OpenMediaVault miniDLNA (DLNA server)</li>
	<li>openmediavault-mysql - OpenMediaVault MySQL (MySQL database server)</li>
	<li>openmediavault-netatalk - OpenMediaVault netatalk (AppleTalk Protocol Suite)</li>
	<li>openmediavault-nut - OpenMediaVault Network UPS Tools (NUT)</li>
	<li>openmediavault-omvpluginsorg - OMV-Plugins.org Package Repositories for OpenMediaVault</li>
	<li>openmediavault-openvpn - OpenMediaVault OpenVPN (VPN server) plugin</li>
	<li>openmediavault-processlist - OpenMediaVault process list panel</li>
	<li>openmediavault-route - OpenMediaVault IP routing table</li>
	<li>openmediavault-subversion - OpenMediaVault Subversion (SVN server)</li>
	<li>openmediavault-transmissionbt - OpenMediaVault Transmission (BitTorrent client)</li>
	<li>openmediavault-virtualbox - OpenMediaVault VirtualBox</li>
	<li>openmediavault-website - OpenMediaVault Website plugin</li>
</ul>

I also like to make it listen on a specific port so I do the following:
<br/>
<strong>echo 'Listen 8080' &gt;&gt; /etc/apache2/ports.conf</strong><br/>
<strong>sed -i 's/&lt;VirtualHost \*:80&gt;/&lt;VirtualHost \*:8080&gt;/' /etc/apache2/sites-available/openmediavault-webgui</strong><br/>



<br/><br/><br/>
<h3>Owncloud</h3>
Owncloud is an amazing private cloud, easy to be set up. The following commands show how to install and configure it with SSL.
<br/><br/>
<strong>aptitude install apache2 php5 php5-json php5-gd php5-sqlite curl libcurl3 libcurl4-openssl-dev php5-curl php5-gd php5-cgi php-pear php5-dev build-essential libpcre3-dev libapache2-mod-php5 php-apc</strong>
<br/><br/>
<strong>pecl install apc</strong><br/>
<strong>echo "apc.enabled=1" &gt;&gt; /etc/php5/cgi/conf.d/20-apc.ini</strong><br/>
<strong>echo "apc.shm_size=30" &gt;&gt; /etc/php5/cgi/conf.d/20-apc.ini</strong><br/>
<br/><br/>
<strong>vim /etc/php5/apache2/php.ini</strong><br/>
<span style="color: #3366ff;">#Change upload_max_size</span><br/>
<span style="color: #3366ff;">#Add extension=apc.so</span><br/>
<br/>
<strong>a2enmod rewrite</strong><br/>
<strong>a2enmod headers</strong><br/>
<br/>
<strong>openssl genrsa -des3 -out server.key 2048</strong><br/>
<strong>openssl rsa -in server.key -out server.key.insecure</strong><br/>
<strong>openssl req -new -key server.key -out server.csr</strong><br/>
<strong>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</strong><br/>
<strong>cp server.crt /etc/ssl/certs</strong><br/>
<strong>cp server.key /etc/ssl/private</strong><br/>
<strong>a2enmod ssl</strong><br/>
<strong>a2ensite default-ssl</strong><br/>
<br/>
<strong>wget http://download.owncloud.org/community/owncloud-5.0.5.tar.bz2</strong><br/>
<strong>tar xvf owncloud-5.0.5.tar.bz2</strong><br/>
<strong>cp -r owncloud /var/www/</strong><br/>
<strong>chown -R www-data:www-data /var/www/owncloud/</strong><br/>

<br/><br/>
<h2>Useful links</h2>
<a href="http://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/" target="_blank">OS Programming (Cambridge)</a>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kasiski-Babbage Cryptanalysis in Python]]></title>
    <link href="http://www.robindavid.fr/blog/2012/06/15/kasiski-babbage-cryptanalysis-in-python/"/>
    <updated>2012-06-15T00:00:00+02:00</updated>
    <id>http://www.robindavid.fr/blog/2012/06/15/kasiski-babbage-cryptanalysis-in-python</id>
    <content type="html"><![CDATA[<p>This blog post shows a basic python implementation of the Kasiski-Babbage Cryptanalysis algorithm for solving a basic Vigenere crypto challenge.</p>

<h2> Principle</h2>

<p>The Kasiski-Babbagge method is based on the fact that once we have found the key length found the clear text is reduced to find the clear text of a ceaser ciphered text (which is really easy).</p>

<p>Another principle of the method is that 3 or more characters at two different position in the ciphered text are most likely to have been ciphered with the same 3 or more characters of the key. Based on this fact the distance between the two suite of characters is very likely to be a multiple of the key length. Example:</p>

<p><img class="center" src="http://www.robindavid.fr/images/matrix.png" title="'matrix'" ></p>

<p>As we can see on the picture above there is 3 patterns with a respective distance of 70, 40 and 10. So we can easily state that the key length is a multiple of the three distances which is 10. So, we can suppose that key is 10 characters long.</p>

<p>The key idea is then to split the text in 10 sub-texts with every ten characters in order to create 10 samples where the frequency of chars can be analyzed with a classical ceaser scheme.</p>

<h2>Code !</h2>

<p>The input file used for this example can be downloaded <a href="http://www.robindavid.fr/downloads/kasiski-input.txt" title="">here</a></p>

<p>Now the key part of the cryptanalysis is to develop the algorithm to find all the tuples  throughout the text calculate theirs distance and the divisors of it.
So the first function to write is a function that calculate all the divisors of a value. The function below do the job and for the given integer return a list of all the divisors.</p>

<figure class='code'><figcaption><span>Get all the divisors of a given number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">getDivisors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s move to the core function that find all the tuples. This function return two values that are the number of tuples found and a dirty list of the divisors of all tuples. (You will see later how it will be used).</p>

<figure class='code'><figcaption><span>Find identical patterns in list (size > 3)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#l argument should be a list containing all bytes of the file (read with toList)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">getTuples</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
</span><span class='line'>    <span class="n">res</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">freq</span> <span class="o">=</span><span class="p">[]</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">):</span> <span class="c"># Loop through all the list</span>
</span><span class='line'>        <span class="n">elt</span><span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="c"># Take at least 3-character length for tuples</span>
</span><span class='line'>        <span class="nb">long</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">elt</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">long</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> <span class="c">#should be 3 if not means we are at the end of the list</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)):</span> <span class="c">#Find further in the list for the same pattern</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nb">long</span><span class="p">]</span> <span class="o">==</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="nb">long</span><span class="p">]:</span> <span class="c">#If match the 3-char check for more</span>
</span><span class='line'>                    <span class="k">while</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nb">long</span><span class="p">]</span> <span class="o">==</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">j</span><span class="o">+</span><span class="nb">long</span><span class="p">]:</span>
</span><span class='line'>                        <span class="nb">long</span> <span class="o">=</span> <span class="nb">long</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>                    <span class="nb">long</span> <span class="o">=</span> <span class="nb">long</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>                    <span class="n">elt</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nb">long</span><span class="p">]</span> <span class="c"># Now we have a tuple </span>
</span><span class='line'>                    <span class="n">diff</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">i</span> <span class="c"># Compute the distance</span>
</span><span class='line'>                    <span class="n">freq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">getDivisors</span><span class="p">(</span><span class="n">diff</span><span class="p">))</span> <span class="c">#Add the divisors to the list </span>
</span><span class='line'>                    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="se">\t</span><span class="s">i:</span><span class="si">%s</span><span class="se">\t</span><span class="s">j:</span><span class="si">%s</span><span class="se">\t</span><span class="s">diff:</span><span class="si">%s</span><span class="se">\t\t</span><span class="s">Divisors:</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">elt</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">diff</span><span class="p">,</span><span class="n">getDivisors</span><span class="p">(</span><span class="n">diff</span><span class="p">)))</span> <span class="c">#Print information about the tuple (can be deleted)</span>
</span><span class='line'>                    <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span><span class="mi">1</span>
</span><span class='line'>                    <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="nb">long</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">long</span> <span class="o">-</span><span class="mi">3</span> <span class="o">+</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">count</span><span class="p">,</span> <span class="n">freq</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step is to make the count each divisors and sort them in descending order. The following function return a list sorted containing a tupe of the divisor number and the number of hits.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">countOcc</span><span class="p">(</span><span class="n">l</span><span class="p">):</span> <span class="c"># return list with (decimal_char, occ) </span>
</span><span class='line'>    <span class="n">d</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">elt</span><span class="p">):</span>
</span><span class='line'>            <span class="n">d</span><span class="p">[</span><span class="n">elt</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">d</span><span class="p">[</span><span class="n">elt</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list returned by this function is:
<strong>[(2, 143), (5, 142), (10, 138), (4, 72), (20, 69), (6, 42), (3, 42), (15, 41), (8, 39), (30, 39), (40, 36), (7, 29), (14, 29), (35, 29), (25, 28), (50, 24), (70, 24), (12, 20), (60, 20)]</strong></p>

<p>In this example we can see that 2 is a divisor for 138 tuple etc. But there is also 5 and 10 that are close and 4 is far behind. Moreover 2 and 5 are also divisors of 10 so this is obvious that the key is 10 characters long.</p>

<p>Now that we &ldquo;know&rdquo; the key length we just have to split the ciphered list into 10 sub-lists modulo 10. The function below return take in argument the key length and the original list and return a dictionnary that use the position as key (ex: 1 to 10) and all the sub-lists as items.</p>

<figure class='code'><figcaption><span>Split file in sublist of 10 chars</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">explode</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">li</span><span class="p">):</span>
</span><span class='line'>    <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">key</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">e</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">li</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="n">dic</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">li</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dic</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next step is the second delicate step. Indeed we need to find the shift for each sub-list. To find it we can do a frequency analysis considering the space as the most frequent character like it used to be in english. So what we will do here is do a frequency analysis for each sub-list. For each sub-list we consider the most frequent character as a space and then apply the associated shift to all character. And then we recreate the original list with all decipher sub-list and then recreate the text. Once it&rsquo;s done we can easily identify if for one of the sub-list the space was not the most frequent and then we can try with the second most frequent and so on.
The first function we need to acomplish this task is a function that decipher a list with a given shift:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">decipher</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">diff</span><span class="p">):</span>
</span><span class='line'>    <span class="n">newl</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="n">e</span> <span class="o">-</span> <span class="n">diff</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">val</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="n">newl</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">256</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">%</span> <span class="o">-</span><span class="mi">256</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">newl</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">newl</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need a function that do the reverse of the explode function. So this function takes back the dictionnary returned by explode and recreate the list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">recreate</span><span class="p">(</span><span class="n">dic</span><span class="p">):</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">dic</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span><span class='line'>                <span class="n">output</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">except</span><span class="p">:</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">output</span>
</span></code></pre></td></tr></table></div></figure>


<p>To finish the following piece of code explode the original list, makes a frequency analysis decipher all the sub-list, then recreate the list and end up by reconverting every decimal character into character in order to print the result.</p>

<figure class='code'><figcaption><span>final code to trigger the all</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="n">explode</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span> <span class="c">#We consider in this exemple a key length of 10 and l the original list</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span> <span class="c">#For each sub-list</span>
</span><span class='line'>    <span class="n">occ</span> <span class="o">=</span> <span class="n">countOcc</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c">#Make a frequency analysis</span>
</span><span class='line'>    <span class="n">shift</span> <span class="o">=</span> <span class="p">(</span><span class="n">occ</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span> <span class="c"># Consider the most frequent element of being a space(32 in decimal)</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;Frequency analysis for the index: </span><span class="si">%s</span><span class="se">\t</span><span class="s">shift:</span><span class="si">%s</span><span class="se">\n</span><span class="si">%s</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">shift</span><span class="p">,</span><span class="n">occ</span><span class="p">))</span> <span class="c">#Print informations (can be deleted)</span>
</span><span class='line'>    <span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">decipher</span><span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">shift</span><span class="p">)</span> <span class="c">#Try do decipher using a classical ceaser function and the determined shift</span>
</span><span class='line'>
</span><span class='line'><span class="n">final</span> <span class="o">=</span> <span class="n">recreate</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="c">#Once we have processed all sub-list recreate a list with all the sub-lists.</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">final</span><span class="p">])</span> <span class="c">#Print the result</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
